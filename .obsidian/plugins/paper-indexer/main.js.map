{
  "version": 3,
  "sources": ["config/constants.js", "services/llm-service.js", "services/metadata-service.js", "utils/formatters.js", "services/file-service.js", "services/paper-service.js", "services/pdf-service.js", "ui/paper-explorer-view.js", "ui/confirm-modal.js", "ui/chat-utils.js", "ui/notifications.js", "ui/message-renderer.js", "ui/services/chat-state-service.js", "ui/services/chat-persistence-service.js", "ui/chat-panel-styles.js", "ui/services/chat-ui-helpers.js", "ui/chat-helpers.js", "ui/chat-panel-view.js", "ui/paper-modal.js", "ui/settings-tab.js", "plugin.js"],
  "sourcesContent": ["const DEFAULT_SETTINGS = {\r\n    summaryApiEndpoint: '',\r\n    summaryApiModel: '',\r\n    summaryApiKey: '',\r\n    pdfDownloadFolder: '_research-papers',\r\n    hideFolderFromFiles: false,\r\n    sectors: ['Other'],\r\n    defaultSector: 'Other',\r\n    // Maximum number of PDF characters to include when generating a resume.\r\n    // Helps control token usage. 0 disables PDF text inclusion.\r\n    maxPdfCharactersForResume: 20000000,\r\n};\r\n\r\nmodule.exports = { DEFAULT_SETTINGS };", "const { requestUrl } = require('obsidian');\r\n\r\nclass LLMService {\r\n    constructor(settings) {\r\n        this.settings = settings;\r\n    }\r\n\r\n    async callLLM(requestBody) {\r\n        if (!this.settings.summaryApiEndpoint || !this.settings.summaryApiModel) {\r\n            throw new Error(\"API endpoint or model is not configured in settings.\");\r\n        }\r\n        if (!this.settings.summaryApiKey) {\r\n            throw new Error(\"API key is not configured in settings.\");\r\n        }\r\n\r\n        try {\r\n            const res = await requestUrl({\r\n                url: this.settings.summaryApiEndpoint,\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${this.settings.summaryApiKey}`\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            });\r\n\r\n            if (res && typeof res.status === 'number' && res.status >= 400) {\r\n                const msg = res.text || JSON.stringify(res.json || res);\r\n                const err = new Error(`status ${res.status}: ${String(msg).slice(0, 200)}`);\r\n                err.status = res.status;\r\n                throw err;\r\n            }\r\n\r\n            let json = null;\r\n            if (res && res.json) json = res.json;\r\n            else if (res && typeof res.text === 'string') {\r\n                try { json = JSON.parse(res.text); } catch (_) { json = null; }\r\n            }\r\n\r\n            const textBody = (res && typeof res.text === 'string') ? res.text : (json ? JSON.stringify(json) : '');\r\n            if (textBody && textBody.trim().startsWith('<!DOCTYPE')) {\r\n                throw new Error(`API returned HTML error page. Check your API endpoint: ${this.settings.summaryApiEndpoint}`);\r\n            }\r\n\r\n            const content = json?.choices?.[0]?.message?.content;\r\n            if (!content) throw new Error(`Invalid API response format. Response: ${String(textBody).slice(0, 500)}`);\r\n\r\n            return content;\r\n        } catch (error) {\r\n            if (error && error.status) throw error;\r\n            throw new Error(error.message || String(error));\r\n        }\r\n    }\r\n\r\n    async callLLMWithPrompt(systemPrompt, userContent) {\r\n        const requestBody = {\r\n            model: this.settings.summaryApiModel,\r\n            messages: [\r\n                { role: \"system\", content: systemPrompt },\r\n                { role: \"user\", content: userContent }\r\n            ]\r\n        };\r\n        return await this.callLLM(requestBody);\r\n    }\r\n\r\n    async getSummary(text) {\r\n        return this.callLLMWithPrompt(\r\n            `# Comprehensive Academic Article Summarizer\r\n\r\n### <System>:\r\nYou are an **Expert Academic Summarizer** with a deep understanding of *research methodologies, theoretical frameworks, and scholarly discourse*. Your summaries maintain rigorous accuracy, capturing key arguments, methodologies, limitations, and implications without oversimplification. You avoid reducing complex ideas into mere bullet points while ensuring clarity and organization.\r\nWhen details are unclear, you will explicitly indicate gaps rather than filling them with assumptions. Where possible, you will use direct excerpts to preserve the integrity of the author\u2019s argument.\r\n\r\n---\r\n\r\n### <Context>:\r\nThe user will provide an academic article (journal paper, thesis, white paper, or research report) they want thoroughly summarized. They value in-depth understanding over quick takeaways, emphasizing research design, argumentation structure, and scholarly context.\r\n\r\n---\r\n\r\n### <Instructions>:\r\n1.  Adapt summarization depth based on article type:\r\n    -   Empirical Studies \u2192 Focus on research question, methodology, data, results, and limitations.\r\n    -   Theoretical Papers \u2192 Focus on central arguments, frameworks, and implications.\r\n    -   Literature Reviews \u2192 Emphasize major themes, key sources, and synthesis of perspectives.\r\n    -   Meta-Analyses \u2192 Highlight statistical techniques, key findings, and research trends.\r\n\r\n2.  Include a multi-layered summary with these components:\r\n    -   (Optional) Executive Summary: A 3-5 sentence quick overview of the article.\r\n    -   Research Question & Objectives: Clearly define what the study aims to investigate.\r\n    -   Core Argument or Hypothesis: Summarize the main thesis or hypothesis tested.\r\n    -   Key Findings & Conclusions: Present the most important results and takeaways.\r\n    -   Methodology & Data: Describe how the study was conducted, including sample size, data sources, and analytical methods.\r\n    -   Theoretical Framework: Identify the theories, models, or intellectual traditions informing the study.\r\n    -   Results & Interpretation: Summarize key data points, statistical analyses, and their implications.\r\n    -   Limitations & Critiques: Note methodological constraints, potential biases, and gaps in the study.\r\n    -   Scholarly Context: Discuss how this paper fits into existing research, citing related works.\r\n    -   Practical & Theoretical Implications: Explain how the findings contribute to academia, policy, or real-world applications.\r\n\r\n3.  Handle uncertainty and gaps responsibly:\r\n    -   Clearly indicate when information is missing:\r\n        -   *\u201CThe article does not specify\u2026\u201D*\r\n        -   *\u201CThe author implies X but does not explicitly state it\u2026\u201D*\r\n    -   Do not infer unstated conclusions.\r\n    -   If the article presents contradictions, note them explicitly rather than resolving them artificially.\r\n\r\n4.  For cited references and sources:\r\n    -   Identify key studies referenced and their relevance.\r\n    -   Highlight intellectual debates the paper engages with.\r\n    -   If applicable, note paradigm shifts or major disagreements in the field.\r\n\r\n---\r\n\r\n### <Constraints>:\r\n\r\n\u2705 Prioritize accuracy and scholarly rigor over brevity.\r\n\u2705 Do not introduce external information not in the original article.\r\n\u2705 Maintain a neutral, academic tone.\r\n\u2705 Use direct excerpts where necessary to avoid misinterpretation.\r\n\u2705 Retain technical language where appropriate; do not oversimplify complex terms.\r\n\r\n---\r\n\r\n### <Output Format>:\r\n\r\n**Executive Summary**\r\n*A high-level overview (3-5 sentences) summarizing the article\u2019s key contributions.*\r\n\r\n**Research Question & Objectives**\r\n[Clearly state what the paper investigates.]\r\n\r\n**Core Argument or Hypothesis**\r\n[Summarize the main thesis or hypothesis.]\r\n\r\n**Key Findings & Conclusions**\r\n-   [Finding 1]\r\n-   [Finding 2]\r\n-   *(Continue as needed)*\r\n\r\n**Methodology & Data**\r\n[Describe research design, sample size, data sources, and analysis methods.]\r\n\r\n**Theoretical Framework**\r\n[Identify key theories, models, or intellectual traditions used.]\r\n\r\n**Results & Interpretation**\r\n[Summarize key data points, statistical analyses, and their implications.]\r\n\r\n**Limitations & Critiques**\r\n[Discuss methodological constraints, biases, and gaps.]\r\n\r\n**Scholarly Context**\r\n[How this study builds on, contradicts, or extends previous research.]\r\n\r\n**Practical & Theoretical Implications**\r\n[Discuss how findings contribute to academia, policy, or real-world applications.]`,\r\n            text\r\n        );\r\n    }\r\n\r\n    async getTags(text) {\r\n        return this.callLLMWithPrompt(\r\n            \"You are a helpful assistant. Generate relevant academic tags for the following research paper content. Return only a comma-separated list of tags, no other text.\", \r\n            text\r\n        );\r\n    }\r\n    \r\n\r\n    async testApi() {\r\n        const testText = \"This is a test message for API configuration. If you see a summary of this, it works.\";\r\n        return await this.getSummary(testText);\r\n    }\r\n}\r\n\r\nmodule.exports = LLMService;", "const { requestUrl } = require('obsidian');\r\n\r\nclass MetadataService {\r\n    extractArxivId(url) {\r\n        const regex = /arxiv\\.org\\/(?:abs|pdf|html)\\/(\\d{4}\\.\\d{4,5}(?:v\\d+)?|[a-zA-Z\\-\\.]+\\/\\d{7})/;\r\n        const match = url.match(regex);\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    isDirectPdfUrl(url) {\r\n        try {\r\n            const u = new URL(url);\r\n            return /\\.pdf$/i.test(u.pathname);\r\n        } catch (_) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async buildMetadataFromDirectPdf(url) {\r\n        let fileNamePart = url.split('?')[0].split('#')[0].split('/').pop() || 'Untitled Paper';\r\n        fileNamePart = decodeURIComponent(fileNamePart).replace(/\\.pdf$/i, '');\r\n        const cleanedTitle = fileNamePart.replace(/[\\-_]+/g, ' ').replace(/\\s+/g, ' ').trim();\r\n        const today = new Date().toISOString().split('T')[0];\r\n\r\n        return {\r\n            id: cleanedTitle.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, ''),\r\n            title: cleanedTitle || 'Untitled Paper',\r\n            authors: 'Unknown',\r\n            summary: 'No abstract available (added from direct PDF).',\r\n            published: today,\r\n            pdfLink: url\r\n        };\r\n    }\r\n\r\n    async fetchArxivMetadata(arxivId) {\r\n        const apiUrl = `http://export.arxiv.org/api/query?id_list=${arxivId}`;\r\n        const response = await requestUrl({ url: apiUrl });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error('Failed to fetch from arXiv API.');\r\n        }\r\n\r\n        const xmlText = await response.text;\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\r\n        const entry = xmlDoc.querySelector(\"entry\");\r\n\r\n        if (!entry) {\r\n            throw new Error('Paper not found on arXiv.');\r\n        }\r\n\r\n        const getText = (tagName) => entry.querySelector(tagName)?.textContent.trim() || 'N/A';\r\n        const getAuthors = () => Array.from(entry.querySelectorAll(\"author name\"))\r\n            .map(el => el.textContent.trim())\r\n            .join(', ');\r\n\r\n        return {\r\n            id: getText(\"id\").split('/').pop(),\r\n            title: getText(\"title\").replace(/\\s+/g, ' '),\r\n            authors: getAuthors(),\r\n            summary: getText(\"summary\").replace(/\\s+/g, ' '),\r\n            published: getText(\"published\").split('T')[0],\r\n            pdfLink: entry.querySelector('link[title=\"pdf\"]')?.getAttribute('href') || ''\r\n        };\r\n    }\r\n\r\n    async getMetadataFromUrl(url) {\r\n        const isPdf = this.isDirectPdfUrl(url);\r\n\r\n        if (isPdf) {\r\n            return await this.buildMetadataFromDirectPdf(url);\r\n        } else {\r\n            const arxivId = this.extractArxivId(url);\r\n            if (!arxivId) {\r\n                throw new Error('Could not extract a valid arXiv ID or PDF link.');\r\n            }\r\n            return await this.fetchArxivMetadata(arxivId);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = MetadataService;", "// Utility functions for formatting and data processing\r\n\r\n/**\r\n * Normalize frontmatter tags into space separated #tag format for the index\r\n * @param {any} rawTags - Raw tags from frontmatter\r\n * @returns {string} Formatted tags string\r\n */\r\nfunction formatTagsForIndex(rawTags) {\r\n    if (!rawTags) return '';\r\n    let arr = [];\r\n    if (Array.isArray(rawTags)) {\r\n        arr = rawTags;\r\n    } else if (typeof rawTags === 'string') {\r\n        if (rawTags.includes(',')) arr = rawTags.split(',');\r\n        else arr = rawTags.split(/\\s+/);\r\n    } else {\r\n        try { arr = String(rawTags).split(/[,\\s]+/); } catch (_) { arr = []; }\r\n    }\r\n    return arr\r\n        .map(t => t.trim())\r\n        .filter(Boolean)\r\n        .map(t => {\r\n            const cleaned = t.replace(/^#+/, '').replace(/\\s+/g, '-');\r\n            return cleaned ? `#${cleaned}` : '';\r\n        })\r\n        .filter(Boolean)\r\n        .join(' ');\r\n}\r\n\r\n/**\r\n * Normalize frontmatter authors field\r\n * @param {any} fmAuthors - Authors from frontmatter\r\n * @returns {string} Normalized authors string\r\n */\r\nfunction normalizeAuthors(fmAuthors) {\r\n    if (!fmAuthors) return '';\r\n    if (Array.isArray(fmAuthors)) return fmAuthors.join(', ');\r\n    try { return String(fmAuthors); } catch (_) { return ''; }\r\n}\r\n\r\n/**\r\n * Normalize frontmatter tags field\r\n * @param {any} fmTags - Tags from frontmatter\r\n * @returns {string[]} Normalized tags array\r\n */\r\nfunction normalizeTags(fmTags) {\r\n    if (!fmTags) return [];\r\n    if (Array.isArray(fmTags)) return fmTags.map(t => String(t));\r\n    if (typeof fmTags === 'string') return fmTags.split(/[,\\s]+/).map(t => t.trim()).filter(Boolean);\r\n    try { return String(fmTags).split(/[,\\s]+/).map(t => t.trim()).filter(Boolean); } catch (_) { return []; }\r\n}\r\n\r\n/**\r\n * Generate a safe filename from paper metadata\r\n * @param {Object} metadata - Paper metadata\r\n * @returns {string} Safe filename for PDF\r\n */\r\nfunction generatePdfFileName(metadata) {\r\n    const sanitizedTitle = metadata.title.replace(/[\\\\/:\"*?<>|]/g, '-').substring(0, 100);\r\n    const firstAuthor = metadata.authors.split(',')[0].trim();\r\n    const year = new Date(metadata.published).getFullYear();\r\n    return `${firstAuthor} et al. - ${year} - ${sanitizedTitle}.pdf`;\r\n}\r\n\r\n/**\r\n * Create a sanitized note filename from title\r\n * @param {string} title - Paper title\r\n * @returns {string} Sanitized filename\r\n */\r\nfunction sanitizeNoteTitle(title) {\r\n    return title.replace(/[\\\\/:\"*?<>|]/g, '-').substring(0, 150);\r\n}\r\n\r\nmodule.exports = {\r\n    formatTagsForIndex,\r\n    normalizeAuthors,\r\n    normalizeTags,\r\n    generatePdfFileName,\r\n    sanitizeNoteTitle\r\n};", "const { requestUrl, TFile, Notice } = require('obsidian');\r\nconst { sanitizeNoteTitle, generatePdfFileName } = require('../utils/formatters');\r\n\r\nclass FileService {\r\n    constructor(app, settings) {\r\n        this.app = app;\r\n        this.settings = settings;\r\n    }\r\n\r\n    getEffectiveFolderPath(folderPath) {\r\n        if (this.settings.hideFolderFromFiles) {\r\n            if (folderPath.startsWith('.')) return folderPath;\r\n            return `.${folderPath}`;\r\n        }\r\n        return folderPath;\r\n    }\r\n\r\n    async ensureFolderExists(folderPath) {\r\n        const effectivePath = this.getEffectiveFolderPath(folderPath);\r\n        if (!await this.app.vault.adapter.exists(effectivePath)) {\r\n            await this.app.vault.createFolder(effectivePath);\r\n        }\r\n    }\r\n\r\n    async downloadPdf(metadata, sector, fileName) {\r\n        if (!metadata.pdfLink) {\r\n            throw new Error('No PDF link found.');\r\n        }\r\n\r\n        const pdfBase = `${this.settings.pdfDownloadFolder}/pdf`;\r\n        const targetFolder = sector ? `${pdfBase}/${sector}` : pdfBase;\r\n        await this.ensureFolderExists(targetFolder);\r\n        \r\n        const targetEffective = this.getEffectiveFolderPath(targetFolder);\r\n        const filePath = `${targetEffective}/${fileName}`;\r\n        \r\n        if (await this.app.vault.adapter.exists(filePath)) {\r\n            new Notice(`PDF \"${fileName}\" already exists.`, 5000);\r\n            return `${pdfBase}/${sector}/${fileName}`.replace(/\\\\/g, '/');\r\n        }\r\n\r\n        const pdfResponse = await requestUrl({ \r\n            url: metadata.pdfLink, \r\n            method: 'GET', \r\n            throw: false \r\n        });\r\n        \r\n        if (!pdfResponse || (typeof pdfResponse.status === 'number' && pdfResponse.status !== 200)) {\r\n            throw new Error('Failed to download PDF.');\r\n        }\r\n\r\n        await this.app.vault.createBinary(filePath, pdfResponse.arrayBuffer);\r\n        \r\n        return `${pdfBase}/${sector}/${fileName}`.replace(/\\\\/g, '/');\r\n    }\r\n\r\n    async createPaperNote(metadata, sector, pdfLogicalPath) {\r\n        const sectorFolder = `${this.settings.pdfDownloadFolder}/${sector}`;\r\n        await this.ensureFolderExists(sectorFolder);\r\n        \r\n        const sanitizedTitle = sanitizeNoteTitle(metadata.title);\r\n        const notePath = `${this.getEffectiveFolderPath(sectorFolder)}/${sanitizedTitle}.md`;\r\n        \r\n        if (await this.app.vault.adapter.exists(notePath)) {\r\n            new Notice(`Note \"${sanitizedTitle}.md\" already exists.`);\r\n            return;\r\n        }\r\n\r\n        const year = new Date(metadata.published).getFullYear();\r\n        \r\n        const markdownContent = `---\r\ntitle: \"${metadata.title.replace(/\"/g, '\\\\\"')}\"\r\nauthors: \"${metadata.authors.replace(/\"/g, '\\\\\"')}\"\r\nyear: ${year}\r\npublished: \"${metadata.published}\"\r\npdf_file: \"${pdfLogicalPath}\"\r\ntags: [paper, to-read]\r\n---\r\n# ${metadata.title}\r\n\r\n| Field | Value |\r\n|---|---|\r\n| **Title** | ${metadata.title} |\r\n| **Authors** | ${metadata.authors} |\r\n| **Date** | ${metadata.published} |\r\n| **Abstract**| ${metadata.summary} |\r\n\r\n**PDF link**: [pdf link](${pdfLogicalPath})\r\n\r\n---\r\n\r\n## Paper PDF\r\n![[${pdfLogicalPath}]]\r\n`;\r\n\r\n        await this.app.vault.create(notePath, markdownContent);\r\n    }\r\n\r\n    async deletePaper(noteFile, paperData) {\r\n        const frontmatter = paperData?.frontmatter || {};\r\n        let pdfFileName = frontmatter.pdf_file;\r\n        \r\n        if (!pdfFileName && frontmatter.title && frontmatter.authors && (frontmatter.published || frontmatter.year)) {\r\n            const legacyMetadata = {\r\n                title: frontmatter.title,\r\n                authors: frontmatter.authors,\r\n                published: frontmatter.published || String(frontmatter.year),\r\n            };\r\n            pdfFileName = generatePdfFileName(legacyMetadata);\r\n        }\r\n\r\n        let confirmMessage = `Permanently delete note \"${noteFile.basename}.md\"?`;\r\n        if (pdfFileName) {\r\n            confirmMessage += `\\n\\nThis will also attempt to delete the associated PDF: \"${pdfFileName}\".`;\r\n        }\r\n        confirmMessage += \"\\n\\nThis cannot be undone.\";\r\n        \r\n        if (!confirm(confirmMessage)) return;\r\n\r\n        try {\r\n            if (pdfFileName) {\r\n                let pdfLogical = pdfFileName;\r\n                if (!pdfLogical.includes('/')) {\r\n                    pdfLogical = `${noteFile.parent.path}/${pdfLogical}`;\r\n                }\r\n                const pdfEffective = await this.resolveLogicalToEffectivePath(pdfLogical);\r\n                const pdfFile = this.app.vault.getAbstractFileByPath(pdfEffective);\r\n                if (pdfFile) {\r\n                    await this.app.vault.delete(pdfFile);\r\n                }\r\n            }\r\n            \r\n            await this.app.vault.delete(noteFile);\r\n            new Notice('Paper deleted.');\r\n        } catch (error) {\r\n            new Notice('Failed to delete paper: ' + error.message);\r\n        }\r\n    }\r\n\r\n    async resolveLogicalToEffectivePath(logicalPath) {\r\n        if (await this.app.vault.adapter.exists(logicalPath)) return logicalPath;\r\n\r\n        const parts = logicalPath.split('/');\r\n        if (parts.length > 0) {\r\n            parts[0] = '.' + parts[0];\r\n            const dotted = parts.join('/');\r\n            if (await this.app.vault.adapter.exists(dotted)) return dotted;\r\n        }\r\n\r\n        return logicalPath;\r\n    }\r\n\r\n    async cleanEmptySectorFolders() {\r\n        const baseFolder = this.getEffectiveFolderPath(this.settings.pdfDownloadFolder);\r\n        \r\n        try {\r\n            if (!await this.app.vault.adapter.exists(baseFolder)) return;\r\n            \r\n            const listing = await this.app.vault.adapter.list(baseFolder);\r\n            \r\n            for (const folderPath of listing.folders) {\r\n                if (folderPath === baseFolder) continue;\r\n                \r\n                const rel = folderPath.slice(baseFolder.length + 1);\r\n                if (!rel || rel.startsWith('_')) continue;\r\n                \r\n                const subListing = await this.app.vault.adapter.list(folderPath);\r\n                const isEmpty = subListing.files.length === 0 && subListing.folders.length === 0;\r\n                \r\n                if (isEmpty) {\r\n                    try {\r\n                        await this.app.vault.adapter.rmdir(folderPath, true);\r\n                    } catch (err) {\r\n                        // ignore\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n    }\r\n\r\n    async toggleFolderVisibility(hideFolder, saveSettings, rebuildAndRefresh) {\r\n        const oldHideValue = this.settings.hideFolderFromFiles;\r\n        const baseFolderName = this.settings.pdfDownloadFolder.replace(/^\\./, '');\r\n        const oldPath = oldHideValue ? `.${baseFolderName}` : baseFolderName;\r\n        const newPath = hideFolder ? `.${baseFolderName}` : baseFolderName;\r\n        \r\n        if (oldPath === newPath) return;\r\n\r\n        try {\r\n            const oldFolder = this.app.vault.getAbstractFileByPath(oldPath);\r\n            if (oldFolder) {\r\n                await this.app.fileManager.renameFile(oldFolder, newPath);\r\n                new Notice(`Folder moved from \"${oldPath}\" to \"${newPath}\"`);\r\n            }\r\n            \r\n            this.settings.hideFolderFromFiles = hideFolder;\r\n            await saveSettings();\r\n            await rebuildAndRefresh();\r\n        } catch (error) {\r\n            new Notice(`Failed to change folder visibility: ${error.message}`);\r\n            this.settings.hideFolderFromFiles = oldHideValue;\r\n            await saveSettings();\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = FileService;", "const { TFile, Notice } = require('obsidian');\r\nconst { formatTagsForIndex, normalizeAuthors, normalizeTags } = require('../utils/formatters');\r\n\r\nclass PaperService {\r\n    constructor(app, settings, fileService, pdfService) {\r\n        this.app = app;\r\n        this.settings = settings;\r\n        this.fileService = fileService;\r\n        this.pdfService = pdfService;\r\n        this.paperIndex = new Map();\r\n        this._rebuildTimer = null;\r\n        this._rebuildPending = false;\r\n    }\r\n\r\n    isPaperFile(file) {\r\n        const paperFolder = this.fileService.getEffectiveFolderPath(this.settings.pdfDownloadFolder);\r\n        return file.path.startsWith(paperFolder) && !file.name.startsWith('_') && file.extension === 'md';\r\n    }\r\n\r\n    async parsePaperFile(file) {\r\n        if (!this.isPaperFile(file)) return null;\r\n\r\n        const cache = this.app.metadataCache.getFileCache(file);\r\n        const frontmatter = cache?.frontmatter || {};\r\n        const paperFolder = this.fileService.getEffectiveFolderPath(this.settings.pdfDownloadFolder);\r\n        const relativePath = file.path.substring(paperFolder.length + 1);\r\n        const sector = relativePath.split('/')[0] || 'Other';\r\n\r\n        return {\r\n            path: file.path,\r\n            basename: file.basename,\r\n            mtime: file.stat.mtime,\r\n            frontmatter: frontmatter,\r\n            sector: sector,\r\n        };\r\n    }\r\n\r\n    async buildPaperIndex() {\r\n        this.paperIndex.clear();\r\n        const files = this.app.vault.getMarkdownFiles();\r\n        \r\n        for (const file of files) {\r\n            const paperData = await this.parsePaperFile(file);\r\n            if (paperData) {\r\n                this.paperIndex.set(file.path, paperData);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getAvailableSectors() {\r\n        const settingsSectors = new Set(this.settings.sectors || ['Other']);\r\n        const folderPath = this.fileService.getEffectiveFolderPath(this.settings.pdfDownloadFolder);\r\n\r\n        try {\r\n            if (await this.app.vault.adapter.exists(folderPath)) {\r\n                const list = await this.app.vault.adapter.list(folderPath);\r\n                const folderSectors = list.folders.map(folder => folder.split('/').pop());\r\n                folderSectors.forEach(sector => settingsSectors.add(sector));\r\n            }\r\n        } catch (error) {\r\n            // ignore\r\n        }\r\n\r\n        if (settingsSectors.size === 0) {\r\n            settingsSectors.add('Other');\r\n        }\r\n\r\n        const sortedSectors = Array.from(settingsSectors).sort();\r\n        if (sortedSectors.includes('Other')) {\r\n            return sortedSectors.filter(s => s !== 'Other').concat('Other');\r\n        }\r\n        return sortedSectors;\r\n    }\r\n\r\n    async pruneUnusedSectors(saveSettings) {\r\n        const baseFolder = this.fileService.getEffectiveFolderPath(this.settings.pdfDownloadFolder);\r\n        const sectorCounts = new Map();\r\n\r\n        for (const paper of this.paperIndex.values()) {\r\n            sectorCounts.set(paper.sector, (sectorCounts.get(paper.sector) || 0) + 1);\r\n        }\r\n\r\n        let changed = false;\r\n        const managed = [...this.settings.sectors];\r\n\r\n        for (const sector of managed) {\r\n            if (sector === 'Other') continue;\r\n\r\n            const hasPapers = sectorCounts.has(sector);\r\n            const folderPath = `${baseFolder}/${sector}`;\r\n            let folderExists = false;\r\n\r\n            try {\r\n                folderExists = await this.app.vault.adapter.exists(folderPath);\r\n            } catch (_) {}\r\n\r\n            if (!hasPapers && !folderExists) {\r\n                this.settings.sectors = this.settings.sectors.filter(s => s !== sector);\r\n                if (this.settings.defaultSector === sector) {\r\n                    this.settings.defaultSector = 'Other';\r\n                }\r\n                changed = true;\r\n            }\r\n        }\r\n\r\n        if (changed) await saveSettings();\r\n    }\r\n\r\n    scheduleRebuild(delay = 300, rebuildAndRefresh) {\r\n        this._rebuildPending = true;\r\n        if (this._rebuildTimer) clearTimeout(this._rebuildTimer);\r\n\r\n        this._rebuildTimer = setTimeout(async () => {\r\n            try {\r\n                await rebuildAndRefresh();\r\n            } finally {\r\n                this._rebuildPending = false;\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    async updateMasterIndex() {\r\n        const indexPath = `_papers_index.md`;\r\n        const sectors = await this.getAvailableSectors();\r\n\r\n        let indexContent = \"# Master Paper Index\\n\\nThis file lists all research papers in the vault, grouped by sector.\\n\\n\";\r\n        const allPapers = Array.from(this.paperIndex.values());\r\n\r\n        for (const sector of sectors) {\r\n            indexContent += `## ${sector}\\n\\n`;\r\n            indexContent += `| Title | Authors | Year | Tags | \\n`;\r\n            indexContent += `| --- | --- | --- | --- | \\n`;\r\n\r\n            const sectorFiles = allPapers.filter(p => p.sector === sector);\r\n            sectorFiles.sort((a, b) => b.mtime - a.mtime);\r\n\r\n            for (const paper of sectorFiles) {\r\n                const fm = paper.frontmatter;\r\n                const title = fm.title || paper.basename;\r\n                const authors = normalizeAuthors(fm.authors) || 'N/A';\r\n                const year = fm.year || 'N/A';\r\n                const displayTags = formatTagsForIndex(fm.tags) || '';\r\n                const pdfFileName = fm.pdf_file;\r\n\r\n                let pdfCell = 'N/A';\r\n                if (pdfFileName) {\r\n                    const safePdf = String(pdfFileName).replace(/\\\\/g, '/');\r\n                    pdfCell = `[pdf link](${safePdf})`;\r\n                }\r\n\r\n                indexContent += `| [[${paper.basename}]] | ${authors} | ${year} | ${displayTags} | ${pdfCell} |\\n`;\r\n            }\r\n\r\n            indexContent += `\\n`;\r\n        }\r\n\r\n        const indexFile = this.app.vault.getAbstractFileByPath(indexPath);\r\n        if (indexFile instanceof TFile) {\r\n            await this.app.vault.modify(indexFile, indexContent);\r\n        } else {\r\n            await this.app.vault.create(indexPath, indexContent);\r\n        }\r\n    }\r\n\r\n    async processAllPapers(options) {\r\n        const { commandName, processFn, shouldSkipFn } = options;\r\n\r\n        try {\r\n            if (!this.settings.summaryApiEndpoint || !this.settings.summaryApiModel || !this.settings.summaryApiKey) {\r\n                new Notice('\u274C Please configure LLM API settings first.');\r\n                return;\r\n            }\r\n\r\n            new Notice(`${commandName}...`);\r\n            const paperFiles = Array.from(this.paperIndex.values());\r\n\r\n            if (paperFiles.length === 0) {\r\n                new Notice('No paper files found to process.');\r\n                return;\r\n            }\r\n\r\n            let processedCount = 0, skippedCount = 0, errorCount = 0;\r\n\r\n            for (const paperData of paperFiles) {\r\n                const paperFile = this.app.vault.getAbstractFileByPath(paperData.path);\r\n                if (!(paperFile instanceof TFile)) continue;\r\n\r\n                try {\r\n                    const content = await this.app.vault.read(paperFile);\r\n                    if (await shouldSkipFn(content, paperData.frontmatter)) {\r\n                        skippedCount++;\r\n                        continue;\r\n                    }\r\n\r\n                    await processFn(paperFile, content);\r\n                    processedCount++;\r\n                } catch (error) {\r\n                    errorCount++;\r\n                }\r\n            }\r\n\r\n            const message = `${commandName} complete! Processed: ${processedCount}, Skipped: ${skippedCount}, Errors: ${errorCount}`;\r\n            new Notice(message);\r\n        } catch (error) {\r\n            new Notice(`Error during ${commandName}: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    async generateResumeForPapers(llmService) {\r\n        await this.processAllPapers({\r\n            commandName: \"Resume Generation\",\r\n            shouldSkipFn: async (content, frontmatter) => /^\\s*#{1,6}\\s+(Resume|Summary)/im.test(content),\r\n            processFn: async (paperFile, content) => {\r\n                const fm = this.app.metadataCache.getFileCache(paperFile)?.frontmatter || {};\r\n                let llmInput = content;\r\n                const pdfFileRef = fm.pdf_file;\r\n\r\n                if (pdfFileRef && this.pdfService) {\r\n                    try {\r\n                        let logicalPath = String(pdfFileRef);\r\n                        if (!logicalPath.includes('/') && paperFile.parent && paperFile.parent.path) {\r\n                            logicalPath = `${paperFile.parent.path}/${logicalPath}`;\r\n                        }\r\n                        const effectivePath = await this.fileService.resolveLogicalToEffectivePath(logicalPath);\r\n                        const pdfTFile = this.app.vault.getAbstractFileByPath(effectivePath);\r\n                        if (pdfTFile) {\r\n                            const extracted = await this.pdfService.extractTextFromPdf(pdfTFile);\r\n                            if (extracted && extracted.length > 20) {\r\n                                llmInput = extracted;\r\n                            } else {\r\n                                new Notice(`\u274C PDF parsing yielded insufficient text for ${paperFile.basename}. Skipping resume generation.`);\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            new Notice(`\u274C PDF file not found for ${paperFile.basename}. Skipping resume generation.`);\r\n                            return;\r\n                        }\r\n                    } catch (err) {\r\n                        new Notice(`\u274C Failed to parse PDF for ${paperFile.basename}. Skipping resume generation.`);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                const resume = await llmService.getSummary(llmInput);\r\n                const paperPdfHeadingRegex = /^##\\s+Paper PDF/im;\r\n                const pdfEmbedRegex = /!\\[\\[.*?\\.pdf\\]\\]/i;\r\n\r\n                let newContent;\r\n                const paperPdfMatch = content.match(paperPdfHeadingRegex);\r\n                if (paperPdfMatch) {\r\n                    const insertPosition = content.search(paperPdfHeadingRegex);\r\n                    newContent = content.slice(0, insertPosition) + `# Resume\\n\\n${resume}\\n\\n` + content.slice(insertPosition);\r\n                } else {\r\n                    const pdfMatch = content.match(pdfEmbedRegex);\r\n                    if (pdfMatch) {\r\n                        const insertPosition = content.indexOf(pdfMatch[0]);\r\n                        newContent = content.slice(0, insertPosition) + `# Resume\\n\\n${resume}\\n\\n` + content.slice(insertPosition);\r\n                    } else {\r\n                        newContent = content + `\\n\\n# Resume\\n\\n${resume}\\n`;\r\n                    }\r\n                }\r\n\r\n                await this.app.vault.modify(paperFile, newContent);\r\n            }\r\n        });\r\n    }\r\n\r\n    async generateTagsForPapers(llmService) {\r\n        await this.processAllPapers({\r\n            commandName: \"Tag Generation\",\r\n            shouldSkipFn: async (content, frontmatter) => {\r\n                const existingTags = normalizeTags(frontmatter.tags);\r\n                const defaultTags = ['paper', 'to-read'];\r\n                return existingTags.some(tag => !defaultTags.includes(tag));\r\n            },\r\n            processFn: async (paperFile, content) => {\r\n                const generatedTags = await llmService.getTags(content);\r\n                const tagsArray = generatedTags.split(',').map(tag => tag.trim()).filter(Boolean);\r\n                const defaultTags = ['paper', 'to-read'];\r\n                const combinedTags = [...new Set([...defaultTags, ...tagsArray])];\r\n\r\n                await this.app.fileManager.processFrontMatter(paperFile, (fm) => {\r\n                    fm.tags = combinedTags;\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    async cleanAllResumes() {\r\n        const baseFiles = Array.from(this.paperIndex.values());\r\n        let modified = 0;\r\n        for (const paperData of baseFiles) {\r\n            const paperFile = this.app.vault.getAbstractFileByPath(paperData.path);\r\n            if (!(paperFile instanceof TFile)) continue;\r\n            try {\r\n                const content = await this.app.vault.read(paperFile);\r\n                const resumeToPdfRegex = /# Resume([\\s\\S]*?)(?=!\\[\\[.*?\\.pdf\\]\\])/g;\r\n                if (resumeToPdfRegex.test(content)) {\r\n                    const newContent = content.replace(resumeToPdfRegex, '');\r\n                    await this.app.vault.modify(paperFile, newContent.trim() + '\\n');\r\n                    modified++;\r\n                }\r\n            } catch (err) {\r\n                // ignore\r\n            }\r\n        }\r\n        new Notice(`Cleaned resume sections in ${modified} files.`);\r\n    }\r\n}\r\n\r\nmodule.exports = PaperService;", "const { Notice } = require('obsidian');\r\n\r\nclass PdfService {\r\n    constructor(app, settings) {\r\n        this.app = app;\r\n        this.settings = settings;\r\n        this.pdfjsLib = null;\r\n    }\r\n\r\n    async initializePdfJs() {\r\n        if (this.pdfjsLib) {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            if (this.app && typeof this.app.loadPdfJs === 'function') {\r\n                try {\r\n                    this.pdfjsLib = await this.app.loadPdfJs();\r\n                    return true;\r\n                } catch (e) {\r\n                    // ignore\r\n                }\r\n            }\r\n            \r\n            if (typeof window !== 'undefined' && window.pdfjsLib) {\r\n                this.pdfjsLib = window.pdfjsLib;\r\n                return true;\r\n            }\r\n\r\n            const pdfFiles = this.app.vault.getFiles().filter(f => f.extension === 'pdf');\r\n            if (pdfFiles.length > 0) {\r\n                const leaf = this.app.workspace.getLeaf(false);\r\n                await leaf.openFile(pdfFiles[0]);\r\n                await new Promise(resolve => setTimeout(resolve, 2000));\r\n                \r\n                if (leaf.view && leaf.view.renderer && leaf.view.renderer.pdfjs) {\r\n                    this.pdfjsLib = leaf.view.renderer.pdfjs;\r\n                    leaf.detach();\r\n                    return true;\r\n                }\r\n                \r\n                leaf.detach();\r\n            }\r\n\r\n            return false;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async extractTextFromPdf(pdfFile) {\r\n        if (!pdfFile) throw new Error('No PDF file provided');\r\n\r\n        try {\r\n            const arrayBuffer = await this.app.vault.readBinary(pdfFile);\r\n\r\n            let pdfjsLib = this.pdfjsLib;\r\n            \r\n            if (!pdfjsLib) {\r\n                if (this.app && typeof this.app.loadPdfJs === 'function') {\r\n                    try {\r\n                        pdfjsLib = await this.app.loadPdfJs();\r\n                        this.pdfjsLib = pdfjsLib;\r\n                    } catch (e) {\r\n                        // ignore\r\n                    }\r\n                }\r\n                \r\n                if (!pdfjsLib && typeof window !== 'undefined' && window.pdfjsLib) {\r\n                    pdfjsLib = window.pdfjsLib;\r\n                    this.pdfjsLib = pdfjsLib;\r\n                }\r\n                \r\n                if (!pdfjsLib && this.app.workspace) {\r\n                    try {\r\n                        const pdfViews = this.app.workspace.getLeavesOfType('pdf');\r\n                        if (pdfViews.length > 0) {\r\n                            const pdfView = pdfViews[0].view;\r\n                            if (pdfView && pdfView.renderer && pdfView.renderer.pdfjs) {\r\n                                pdfjsLib = pdfView.renderer.pdfjs;\r\n                                this.pdfjsLib = pdfjsLib;\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        // ignore\r\n                    }\r\n                }\r\n                \r\n                if (!pdfjsLib) {\r\n                    try {\r\n                        const leaf = this.app.workspace.getLeaf(false);\r\n                        await leaf.openFile(pdfFile);\r\n                        await new Promise(resolve => setTimeout(resolve, 1000));\r\n                        \r\n                        if (leaf.view && leaf.view.renderer && leaf.view.renderer.pdfjs) {\r\n                            pdfjsLib = leaf.view.renderer.pdfjs;\r\n                            this.pdfjsLib = pdfjsLib;\r\n                        }\r\n                        \r\n                        leaf.detach();\r\n                    } catch (e) {\r\n                        // ignore\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!pdfjsLib) {\r\n                const errorMsg = 'PDF.js not available. Please open a PDF file in Obsidian first to initialize PDF.js, then try again.';\r\n                throw new Error(errorMsg);\r\n            }\r\n\r\n            const loadingTask = pdfjsLib.getDocument({ data: arrayBuffer });\r\n            const pdf = await loadingTask.promise;\r\n\r\n            let fullText = '';\r\n            for (let i = 1; i <= pdf.numPages; i++) {\r\n                const page = await pdf.getPage(i);\r\n                const content = await page.getTextContent();\r\n                const pageText = content.items.map(item => (item && item.str) ? item.str : '').join(' ');\r\n                fullText += `\\n\\n---- Page ${i} ----\\n\\n` + pageText;\r\n            }\r\n\r\n            try { if (pdf && typeof pdf.destroy === 'function') pdf.destroy(); } catch (_) {}\r\n\r\n            return fullText.trim();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = PdfService;\r\n", "const { ItemView, TFile } = require('obsidian');\r\n\r\nconst PAPER_EXPLORER_VIEW_TYPE = \"paper-explorer-view\";\r\n\r\nclass PaperExplorerView extends ItemView {\r\n    constructor(leaf, settings, plugin) {\r\n        super(leaf);\r\n        this.settings = settings;\r\n        this.plugin = plugin;\r\n    }\r\n\r\n    getViewType() { \r\n        return PAPER_EXPLORER_VIEW_TYPE; \r\n    }\r\n    \r\n    getDisplayText() { \r\n        return \"Research Papers\"; \r\n    }\r\n    \r\n    getIcon() { \r\n        return \"library\"; \r\n    }\r\n\r\n    async onOpen() {\r\n        try {\r\n            if (!this.plugin || !this.plugin.paperService.paperIndex || this.plugin.paperService.paperIndex.size === 0) {\r\n                await this.plugin.rebuildAndRefresh();\r\n            }\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n        this.renderView();\r\n    }\r\n\r\n    async renderView() {\r\n        const container = this.contentEl || this.containerEl.children[1];\r\n        container.empty();\r\n\r\n        const header = container.createEl(\"div\", { cls: \"paper-explorer-header\" });\r\n        this.createHomeViewerButton(header);\r\n        this.createAddPaperButton(header);\r\n\r\n        const layout = container.createEl('div', { cls: 'paper-explorer-layout' });\r\n        const sidebar = layout.createEl('div', { cls: 'paper-explorer-sidebar' });\r\n        const contentArea = layout.createEl('div', { cls: 'paper-explorer-content' });\r\n        \r\n        await this.createSectorSelector(sidebar);\r\n        await this.renderPaperTable(contentArea);\r\n    }\r\n\r\n    createHomeViewerButton(header) {\r\n        const viewerBtn = document.createElement('button');\r\n        viewerBtn.style.border = 'none';\r\n        viewerBtn.style.background = 'none';\r\n        viewerBtn.style.cursor = 'pointer';\r\n        viewerBtn.style.padding = '0';\r\n        viewerBtn.style.margin = '0';\r\n        viewerBtn.style.color = 'var(--text-normal)';\r\n        viewerBtn.style.boxShadow = 'none';\r\n        \r\n        viewerBtn.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline></svg><span style=\"margin-left:4px;\">Open Home Viewer</span>';\r\n        viewerBtn.style.fontSize = '0.75rem';\r\n        viewerBtn.title = 'Open Home Viewer.md';\r\n        \r\n        viewerBtn.addEventListener('click', async (e) => {\r\n            e.preventDefault();\r\n            const viewerPath = \"/_papers_index.md\";\r\n            let file = this.plugin.app.vault.getAbstractFileByPath(viewerPath);\r\n            if (!file) {\r\n                file = await this.plugin.app.vault.create(viewerPath, '# Viewer\\n');\r\n            }\r\n            if (file instanceof TFile) {\r\n                const leaf = this.plugin.app.workspace.getLeaf(false);\r\n                await leaf.openFile(file);\r\n            }\r\n        });\r\n        \r\n        header.appendChild(viewerBtn);\r\n    }\r\n\r\n    createAddPaperButton(header) {\r\n        const buttonContainer = header.createEl('div', { cls: 'button-container' });\r\n        buttonContainer.style.display = 'flex';\r\n        buttonContainer.style.justifyContent = 'center';\r\n        \r\n        const addButton = buttonContainer.createEl(\"button\", { text: \"+ Add Paper\" });\r\n        addButton.style.fontSize = '1em';\r\n        addButton.style.padding = '10px 20px';\r\n        addButton.style.borderRadius = '5px';\r\n        addButton.style.border = 'none';\r\n        addButton.style.cursor = 'pointer';\r\n        addButton.style.marginBottom = '10px';\r\n        addButton.addClass(\"mod-cta\");\r\n        \r\n        addButton.addEventListener(\"click\", () => {\r\n            this.plugin.openAddPaperModal();\r\n        });\r\n    }\r\n\r\n    async createSectorSelector(sidebar) {\r\n        const sectors = await this.plugin.paperService.getAvailableSectors();\r\n        const sectorWrap = sidebar.createEl('div', { cls: 'sector-select-wrap' });\r\n        sectorWrap.style.width = '100%';\r\n        sectorWrap.createEl('hr');\r\n\r\n        const select = sectorWrap.createEl('select', { cls: 'sector-select' });\r\n        select.style.marginTop = '24px';\r\n        const space = sectorWrap.createEl('div', { cls: 'sector-select-space' });\r\n        space.style.height = '24px';\r\n        select.style.width = '100%';\r\n        select.createEl('option', { value: 'All', text: 'All Sectors' });\r\n\r\n        for (const s of sectors) {\r\n            select.createEl('option', { value: s, text: s });\r\n        }\r\n\r\n        const active = this.plugin._activeSector || 'All';\r\n        if (!sectors.includes(active) && active !== 'All') {\r\n            this.plugin._activeSector = 'All';\r\n        }\r\n        try { \r\n            select.value = this.plugin._activeSector || 'All'; \r\n        } catch (e) { \r\n            select.value = 'All'; \r\n        }\r\n\r\n        select.addEventListener('change', (ev) => {\r\n            const val = ev.target.value;\r\n            this.plugin._activeSector = val === 'All' ? 'All' : val;\r\n            this.renderView();\r\n        });\r\n    }\r\n\r\n    async renderPaperTable(contentArea) {\r\n        const allPapers = Array.from(this.plugin.paperService.paperIndex.values());\r\n        const paperNotes = allPapers.filter(paper => {\r\n            if (this.plugin._activeSector && this.plugin._activeSector !== 'All') {\r\n                return paper.sector === this.plugin._activeSector;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        if (paperNotes.length === 0) {\r\n            contentArea.createEl(\"p\", { text: \"No papers found. Click 'Add Paper' to start.\" });\r\n            return;\r\n        }\r\n\r\n        const table = contentArea.createEl(\"table\", { cls: \"paper-index-table\" });\r\n        table.style.width = '100%';\r\n        table.style.borderCollapse = 'separate';\r\n        table.style.borderSpacing = '0 24px';\r\n        \r\n        const thead = table.createEl(\"thead\");\r\n        const headerRow = thead.createEl(\"tr\");\r\n        headerRow.createEl(\"th\", { text: \"Title\" });\r\n\r\n        const tbody = table.createEl(\"tbody\");\r\n        paperNotes.sort((a, b) => b.mtime - a.mtime);\r\n\r\n        for (const paper of paperNotes) {\r\n            const title = paper.frontmatter.title || paper.basename;\r\n            const row = tbody.createEl(\"tr\");\r\n            row.style.cursor = 'pointer';\r\n            row.style.marginTop = '4px';\r\n\r\n            const titleCell = row.createEl(\"td\");\r\n            titleCell.setText(title);\r\n            titleCell.addClass('paper-title-cell');\r\n            titleCell.addEventListener('click', () => {\r\n                this.app.workspace.openLinkText(paper.path, '', false);\r\n            });\r\n            \r\n            this.createDeleteButton(row, paper);\r\n        }\r\n    }\r\n\r\n    createDeleteButton(row, paper) {\r\n        const deleteCell = row.createEl('td');\r\n        const deleteBtn = deleteCell.createEl('button', { text: '\u00D7' });\r\n        deleteBtn.addClass('paper-delete-btn');\r\n        deleteBtn.title = 'Delete paper note and associated PDF';\r\n        deleteBtn.style.cursor = 'pointer';\r\n        deleteBtn.style.background = 'transparent';\r\n        deleteBtn.style.border = 'none';\r\n        deleteBtn.style.color = '#c94b4b';\r\n        deleteBtn.style.fontSize = '1.1em';\r\n        deleteBtn.style.padding = '4px 8px';\r\n        deleteBtn.style.boxShadow = 'none';\r\n        \r\n        deleteBtn.addEventListener('click', async (ev) => {\r\n            ev.stopPropagation();\r\n            const fileToDelete = this.app.vault.getAbstractFileByPath(paper.path);\r\n            if (fileToDelete instanceof TFile) {\r\n                await this.plugin.deletePaper(fileToDelete);\r\n            } else {\r\n                new Notice(\"Error: Could not find file to delete.\");\r\n                this.plugin.rebuildAndRefresh();\r\n            }\r\n        });\r\n    }\r\n\r\n    async onClose() {}\r\n}\r\n\r\nmodule.exports = { PaperExplorerView, PAPER_EXPLORER_VIEW_TYPE };", "const { Modal } = require('obsidian');\r\n\r\nclass ConfirmModal extends Modal {\r\n    constructor(app, message, onConfirm) {\r\n        super(app);\r\n        this.message = message;\r\n        this.onConfirm = onConfirm;\r\n    }\r\n    onOpen() {\r\n        const { contentEl } = this;\r\n        contentEl.createEl('p', { text: this.message });\r\n        const controls = contentEl.createEl('div', { cls: 'modal-buttons' });\r\n        const confirmBtn = controls.createEl('button', { text: 'Confirm' });\r\n        const cancelBtn = controls.createEl('button', { text: 'Cancel' });\r\n        confirmBtn.addEventListener('click', () => {\r\n            try {\r\n                if (typeof this.onConfirm === 'function') this.onConfirm();\r\n            } finally {\r\n                this.close();\r\n            }\r\n        });\r\n        cancelBtn.addEventListener('click', () => this.close());\r\n    }\r\n    onClose() {}\r\n}\r\n\r\nmodule.exports = { ConfirmModal };\r\n", "// Small utility helpers for ChatPanelView extracted for clarity and reuse\r\nfunction generateDiscussionId() {\r\n    return 'discussion_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nfunction safeToString(v) {\r\n    if (v == null) return '';\r\n    if (typeof v === 'string') return v;\r\n    try { return String(v); } catch (_) { return '' }\r\n}\r\n\r\nfunction normalizeMessage(m) {\r\n    const safeRole = ['user', 'assistant', 'system'].includes(m?.role) ? m.role : 'assistant';\r\n    const rawContent = m?.content;\r\n    const content = typeof rawContent === 'string' ? rawContent : safeToString(rawContent);\r\n    let ts = m?.timestamp;\r\n    let dateObj;\r\n    if (ts instanceof Date) {\r\n        dateObj = ts;\r\n    } else if (typeof ts === 'string' && ts) {\r\n        const parsed = new Date(ts);\r\n        dateObj = isNaN(parsed.getTime()) ? new Date() : parsed;\r\n    } else {\r\n        dateObj = new Date();\r\n    }\r\n    return {\r\n        id: m?.id ?? (Date.now() + Math.random()),\r\n        role: safeRole,\r\n        content,\r\n        timestamp: dateObj,\r\n        isTyping: false\r\n    };\r\n}\r\n\r\nmodule.exports = { generateDiscussionId, normalizeMessage, safeToString };\r\n", "const { Notice } = require('obsidian');\r\n\r\nfunction notify(message) {\r\n    try { new Notice(message); } catch (e) { console.warn('Notice failed:', e); }\r\n}\r\n\r\nfunction notifyError(message, err) {\r\n    try { new Notice(message); } catch (e) { console.warn('Notice failed:', e); }\r\n    if (err) console.error(message, err);\r\n}\r\n\r\nfunction notifyInfo(message) {\r\n    notify(message);\r\n}\r\n\r\nmodule.exports = { notify, notifyError, notifyInfo };\r\n", "// Renders a single chat message into the provided container.\r\n// Options: { app, ConfirmModal, onDelete }\r\nconst { notifyError } = require('./notifications');\r\nfunction renderMessage(container, message, options = {}) {\r\n    const wrapper = container.createEl('div', { cls: `chat-message-wrapper ${message.role}-message` });\r\n    // Header row with role and timestamp\r\n    const header = wrapper.createEl('div', { cls: 'chat-message-header' });\r\n    header.createEl('div', { cls: 'chat-message-role', text: message.role === 'user' ? 'You' : (message.role === 'assistant' ? 'Assistant' : 'Assistant') });\r\n    const tsText = message.timestamp instanceof Date ? message.timestamp.toLocaleTimeString() : new Date(message.timestamp).toLocaleTimeString();\r\n    header.createEl('div', { cls: 'chat-message-timestamp', text: tsText });\r\n\r\n    // Message content area\r\n    const contentEl = wrapper.createEl('div', { cls: 'chat-message-content' });\r\n\r\n    // For system/assistant messages, collapse long messages\r\n    if ((message.role === 'system' || message.role === 'assistant') && typeof message.content === 'string' && message.content.length > 240) {\r\n        const shortText = message.content.slice(0, 220) + '...';\r\n        const collapsed = contentEl.createEl('div', { cls: 'collapsed-message' });\r\n        collapsed.createEl('div', { cls: 'collapsed-text', text: shortText });\r\n        const toggle = collapsed.createEl('button', { cls: 'collapse-toggle', text: 'Show more' });\r\n        const full = collapsed.createEl('div', { cls: 'full-text', text: message.content });\r\n        full.style.display = 'none';\r\n\r\n        toggle.addEventListener('click', () => {\r\n            const isHidden = full.style.display === 'none';\r\n            full.style.display = isHidden ? 'block' : 'none';\r\n            collapsed.querySelector('.collapsed-text').style.display = isHidden ? 'none' : 'block';\r\n            toggle.textContent = isHidden ? 'Show less' : 'Show more';\r\n        });\r\n    } else {\r\n        contentEl.createEl('div', { cls: 'message-text', text: message.content });\r\n    }\r\n\r\n    if (message.isTyping) wrapper.addClass('typing');\r\n\r\n    // Right-click context to delete message\r\n    wrapper.addEventListener('contextmenu', (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            if (options.ConfirmModal && typeof options.ConfirmModal === 'function') {\r\n                const modal = new options.ConfirmModal(options.app, 'Delete this message?', () => {\r\n                    if (typeof options.onDelete === 'function') options.onDelete(message.id);\r\n                });\r\n                modal.open();\r\n            } else if (typeof options.onDelete === 'function') {\r\n                options.onDelete(message.id);\r\n            }\r\n        } catch (err) {\r\n            notifyError('Failed to show delete confirm, deleting directly', err);\r\n            if (typeof options.onDelete === 'function') options.onDelete(message.id);\r\n        }\r\n    });\r\n\r\n    return wrapper;\r\n}\r\n\r\nmodule.exports = { renderMessage };\r\n", "// State management and discussion helpers for ChatPanelView\r\nconst { TFile } = require('obsidian');\r\nconst { normalizeMessage } = require('../chat-utils');\r\n\r\nclass ChatStateService {\r\n    constructor(host) {\r\n        // host is the ChatPanelView instance to access app/plugin, but we keep logic here\r\n        this.host = host;\r\n    }\r\n\r\n    // Message operations\r\n    addMessageToHistory(role, content, isTyping = false) {\r\n        if (!content || typeof content !== 'string' || content.trim() === '') return null;\r\n        if (!role || !['user', 'assistant', 'system'].includes(role)) role = 'assistant';\r\n        const hist = this.host.chatHistory;\r\n        if ((role === 'system' || role === 'assistant') && hist.length > 0) {\r\n            const last = hist[hist.length - 1];\r\n            if (last && last.role === role && last.content === content && !last.isTyping) {\r\n                return last.id;\r\n            }\r\n        }\r\n        const messageId = Date.now() + Math.random();\r\n        hist.push({ id: messageId, role, content, timestamp: new Date(), isTyping });\r\n        this.host.renderChatHistory();\r\n        return messageId;\r\n    }\r\n\r\n    updateMessageInHistory(messageId, newContent) {\r\n        const msg = this.host.chatHistory.find(m => m.id === messageId);\r\n        if (msg) {\r\n            msg.content = newContent;\r\n            msg.isTyping = false;\r\n            this.host.renderChatHistory();\r\n            this.host.saveConversation();\r\n        }\r\n    }\r\n\r\n    deleteMessage(messageId) {\r\n        const idx = this.host.chatHistory.findIndex(m => m.id === messageId);\r\n        if (idx === -1) return;\r\n        this.host._lastDeletedMessage = { message: this.host.chatHistory[idx], index: idx };\r\n        this.host.chatHistory = this.host.chatHistory.filter(m => m.id !== messageId);\r\n        this.host.renderChatHistory();\r\n        this.host.saveConversation();\r\n    }\r\n\r\n    // Discussion helpers\r\n    createDiscussion(id, notePath, title = null) {\r\n        const h = this.host;\r\n        return {\r\n            id,\r\n            title: title || h.generateDiscussionTitle(),\r\n            notePath,\r\n            noteName: notePath ? notePath.split('/').pop().replace('.md', '') : 'Unknown',\r\n            state: 'DRAFT',\r\n            startTime: new Date(),\r\n            lastUpdated: new Date(),\r\n            messageCount: h.chatHistory.length,\r\n            history: [...h.chatHistory],\r\n            userMessageHistory: [...h.userMessageHistory],\r\n            includePdfInContext: h.includePdfInContext,\r\n            includeNoteInContext: h.includeNoteInContext,\r\n            includedNotes: this.serializeIncludedNotes()\r\n        };\r\n    }\r\n\r\n    serializeIncludedNotes() {\r\n        const out = [];\r\n        for (const [path, data] of this.host.includedNotes.entries()) {\r\n            out.push({\r\n                path,\r\n                name: data.name || path,\r\n                includeInContext: !!data.includeInContext,\r\n                content: typeof data.content === 'string' ? data.content : ''\r\n            });\r\n        }\r\n        return out;\r\n    }\r\n\r\n    deserializeIncludedNotes(serializedNotes) {\r\n        this.host.includedNotes.clear();\r\n        if (Array.isArray(serializedNotes)) {\r\n            for (const note of serializedNotes) {\r\n                this.host.includedNotes.set(note.path, {\r\n                    name: note.name || note.path,\r\n                    content: note.content || '',\r\n                    includeInContext: note.includeInContext !== false\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    validateDiscussion(d) {\r\n        return d && typeof d.id === 'string' && typeof d.notePath === 'string' && Array.isArray(d.history);\r\n    }\r\n\r\n    normalizeHistory(history) {\r\n        return (history || [])\r\n            .map(m => normalizeMessage(m))\r\n            .filter(m => {\r\n                const trimmed = (m.content || '').trim();\r\n                return trimmed.length > 0 && !/^(\uD83D\uDCAD\\s*)?Thinking\\.\\.\\.$/i.test(trimmed);\r\n            });\r\n    }\r\n\r\n    async loadIncludedNoteEntry(path, file) {\r\n        const h = this.host;\r\n        try {\r\n            const f = file instanceof TFile ? file : h.app.vault.getAbstractFileByPath(path);\r\n            if (!(f instanceof TFile)) return;\r\n            const content = await h.app.vault.read(f);\r\n            h.includedNotes.set(path, { name: f.basename, content, includeInContext: true });\r\n        } catch (err) {\r\n            console.warn('Failed to load included note', path, err);\r\n            this.addMessageToHistory('system', `Failed to include note: ${path}`);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = { ChatStateService };\r\n", "// Persistence and loading of conversations/discussions\r\nconst { normalizeMessage } = require('../chat-utils');\r\n\r\nclass ChatPersistenceService {\r\n    constructor(host) {\r\n        this.host = host; // ChatPanelView instance\r\n    }\r\n\r\n    async saveConversation() {\r\n        const h = this.host;\r\n        if (!h.currentNoteFile) return;\r\n\r\n        if (h.currentDiscussionId && h.chatHistory.length > 0) {\r\n            await this._saveCurrentDiscussion();\r\n        }\r\n\r\n        h.conversations.set(h.currentNoteFile.path, {\r\n            history: h.chatHistory.map(m => ({\r\n                ...m,\r\n                isTyping: false,\r\n                timestamp: (m.timestamp instanceof Date)\r\n                    ? m.timestamp.toISOString()\r\n                    : (m.timestamp ? new Date(m.timestamp).toISOString() : new Date().toISOString())\r\n            })),\r\n            userMessageHistory: [...h.userMessageHistory],\r\n            includePdfInContext: h.includePdfInContext,\r\n            includeNoteInContext: h.includeNoteInContext,\r\n            includedNotes: Array.from(h.includedNotes.entries()).map(([p, e]) => ({\r\n                path: p,\r\n                name: e.name,\r\n                includeInContext: !!e.includeInContext,\r\n                content: typeof e.content === 'string' ? e.content : ''\r\n            })),\r\n            lastUpdated: new Date(),\r\n            currentDiscussionId: h.currentDiscussionId\r\n        });\r\n\r\n        if (h.plugin.settings) {\r\n            try {\r\n                const conversationsData = {};\r\n                for (const [path, conversation] of h.conversations.entries()) {\r\n                    const trimmedHistory = (conversation.history || []).slice(-50).map(m => ({\r\n                        ...m,\r\n                        isTyping: false,\r\n                        timestamp: (m.timestamp instanceof Date)\r\n                            ? m.timestamp.toISOString()\r\n                            : (m.timestamp ? new Date(m.timestamp).toISOString() : new Date().toISOString())\r\n                    }));\r\n                    conversationsData[path] = { ...conversation, history: trimmedHistory };\r\n                }\r\n                for (const [path, conv] of Object.entries(conversationsData)) {\r\n                    if (!conv.includedNotes && h.currentNoteFile && path === h.currentNoteFile.path) {\r\n                        conv.includedNotes = Array.from(h.includedNotes.entries()).map(([p, e]) => ({ path: p, name: e.name, includeInContext: !!e.includeInContext, content: e.content }));\r\n                    } else {\r\n                        conv.includedNotes = conv.includedNotes || [];\r\n                    }\r\n                }\r\n\r\n                const discussionsData = {};\r\n                for (const [path, noteDiscussions] of h.discussions.entries()) {\r\n                    discussionsData[path] = {};\r\n                    if (noteDiscussions instanceof Map) {\r\n                        for (const [discussionId, discussionData] of noteDiscussions.entries()) {\r\n                            const trimmedDiscussion = { ...discussionData, history: (discussionData.history || []).slice(-50) };\r\n                            discussionsData[path][discussionId] = trimmedDiscussion;\r\n                        }\r\n                    } else if (noteDiscussions && typeof noteDiscussions === 'object') {\r\n                        for (const [discussionId, discussionData] of Object.entries(noteDiscussions)) {\r\n                            const trimmedDiscussion = { ...discussionData, history: (discussionData.history || []).slice(-50) };\r\n                            discussionsData[path][discussionId] = trimmedDiscussion;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const trimmedGlobalHistory = h.globalDiscussionHistory.slice(0, 100).map(d => ({ ...d, history: (d.history || []).slice(-20) }));\r\n\r\n                h.plugin.settings.chatConversations = conversationsData;\r\n                h.plugin.settings.discussions = discussionsData;\r\n                h.plugin.settings.globalDiscussionHistory = trimmedGlobalHistory;\r\n                await h.plugin.saveSettings();\r\n                h._lastSavedAt = new Date();\r\n            } catch (error) {\r\n                console.warn('Failed to save chat conversations and discussions:', error);\r\n                const { notifyError } = require('../notifications');\r\n                notifyError('Failed to save chat conversations. Check console for details.', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _saveCurrentDiscussion() {\r\n        const h = this.host;\r\n        if (!h.currentNoteFile || !h.currentDiscussionId || h.chatHistory.length === 0) return;\r\n        if (h._saveInProgress) { h._pendingSave = true; return; }\r\n        h._saveInProgress = true;\r\n        try {\r\n            const discussionData = h.stateSvc.createDiscussion(h.currentDiscussionId, h.currentNoteFile.path);\r\n            discussionData.state = 'SAVED';\r\n            discussionData.lastUpdated = new Date();\r\n            discussionData.history = h.chatHistory.map(m => ({\r\n                ...m,\r\n                isTyping: false,\r\n                timestamp: m.timestamp instanceof Date ? m.timestamp.toISOString() : new Date(m.timestamp || Date.now()).toISOString()\r\n            })).filter(m => {\r\n                const trimmed = (m.content || '').trim();\r\n                return trimmed.length > 0 && !/^(\uD83D\uDCAD\\s*)?Thinking\\.\\.\\.$/i.test(trimmed);\r\n            });\r\n            if (!h.discussions.has(h.currentNoteFile.path) || !(h.discussions.get(h.currentNoteFile.path) instanceof Map)) {\r\n                h.discussions.set(h.currentNoteFile.path, new Map());\r\n            }\r\n            const noteMap = h.discussions.get(h.currentNoteFile.path);\r\n            discussionData.messageCount = (discussionData.history || []).length;\r\n            noteMap.set(h.currentDiscussionId, discussionData);\r\n            h._addDiscussionToNote(h.currentDiscussionId, h.currentNoteFile.path);\r\n            h.discussionIndex.set(h.currentDiscussionId, { notePath: h.currentNoteFile.path, lastUpdated: discussionData.lastUpdated });\r\n\r\n            try {\r\n                const summary = {\r\n                    id: discussionData.id,\r\n                    title: discussionData.title || 'Untitled Discussion',\r\n                    noteFile: discussionData.notePath || h.currentNoteFile.path,\r\n                    noteName: discussionData.noteName || (h.currentNoteFile ? h.currentNoteFile.basename : 'Unknown'),\r\n                    startTime: discussionData.startTime || new Date(),\r\n                    lastUpdated: discussionData.lastUpdated || new Date(),\r\n                    messageCount: discussionData.messageCount || (discussionData.history || []).length,\r\n                    history: (discussionData.history || []).slice(-3)\r\n                };\r\n                const existingIndex = h.globalDiscussionHistory.findIndex(d => d.id === summary.id);\r\n                if (existingIndex !== -1) h.globalDiscussionHistory[existingIndex] = summary; else h.globalDiscussionHistory.unshift(summary);\r\n                if (h.globalDiscussionHistory.length > 100) h.globalDiscussionHistory = h.globalDiscussionHistory.slice(0, 100);\r\n            } catch (e) { console.warn('Failed to update globalDiscussionHistory', e); }\r\n        } finally {\r\n            h._saveInProgress = false;\r\n            if (h._pendingSave) { h._pendingSave = false; await this._saveCurrentDiscussion(); }\r\n        }\r\n    }\r\n\r\n    async loadConversation() {\r\n        const h = this.host;\r\n        if (!h.currentNoteFile) return;\r\n        const filePath = h.currentNoteFile.path;\r\n\r\n        if (h.plugin.settings?.discussions) {\r\n            try {\r\n                for (const [path, noteDiscussions] of Object.entries(h.plugin.settings.discussions)) {\r\n                    if (!h.discussions.has(path)) h.discussions.set(path, new Map());\r\n                    const discussionMap = h.discussions.get(path);\r\n                    for (const [discussionId, discussionData] of Object.entries(noteDiscussions)) {\r\n                        discussionMap.set(discussionId, discussionData);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.warn('Failed to load discussions from settings:', error);\r\n            }\r\n        }\r\n\r\n        if (h.plugin.settings?.globalDiscussionHistory) {\r\n            try { h.globalDiscussionHistory = [...(h.plugin.settings.globalDiscussionHistory || [])]; } catch (error) { console.warn('Failed to load global discussion history:', error); }\r\n        }\r\n\r\n        const noteDiscussions = h.discussions.get(filePath);\r\n        if (noteDiscussions && noteDiscussions.size > 0) {\r\n            const discussionsArray = Array.from(noteDiscussions.values());\r\n            const mostRecent = discussionsArray.sort((a, b) => new Date(b.lastUpdated || b.startTime) - new Date(a.lastUpdated || a.startTime))[0];\r\n            if (mostRecent) { h.loadDiscussion(mostRecent.id, filePath); return; }\r\n        }\r\n\r\n        if (h.conversations.has(filePath)) {\r\n            const conversation = h.conversations.get(filePath);\r\n            h.chatHistory = this._normalize(conversation.history);\r\n            h.userMessageHistory = [...(conversation.userMessageHistory || [])];\r\n            h.includePdfInContext = conversation.includePdfInContext !== undefined ? !!conversation.includePdfInContext : true;\r\n            h.includeNoteInContext = conversation.includeNoteInContext !== undefined ? !!conversation.includeNoteInContext : true;\r\n            h.currentDiscussionId = conversation.currentDiscussionId;\r\n            try {\r\n                if (conversation.includedNotes instanceof Map) h.includedNotes = new Map(conversation.includedNotes);\r\n                else if (Array.isArray(conversation.includedNotes)) h.includedNotes = new Map((conversation.includedNotes || []).map(it => [it.path, { name: it.name || it.path, content: it.content || '', includeInContext: it.includeInContext !== false }]));\r\n                else h.includedNotes = new Map();\r\n            } catch (_) { h.includedNotes = new Map(); }\r\n            h.renderChatHistory(); h.updateNoteInfo();\r\n            return;\r\n        }\r\n\r\n        if (h.plugin.settings?.chatConversations?.[filePath]) {\r\n            const conversation = h.plugin.settings.chatConversations[filePath];\r\n            const normalizedHistory = this._normalize(conversation.history);\r\n            h.chatHistory = normalizedHistory;\r\n            h.userMessageHistory = conversation.userMessageHistory || [];\r\n            h.currentDiscussionId = conversation.currentDiscussionId;\r\n            h.conversations.set(filePath, {\r\n                ...conversation,\r\n                history: normalizedHistory,\r\n                includedNotes: (conversation.includedNotes || []).reduce((map, it) => { try { if (it && it.path) map.set(it.path, { name: it.name || it.path, content: it.content || '', includeInContext: it.includeInContext !== false }); } catch (e) {} return map; }, new Map())\r\n            });\r\n            h.includePdfInContext = conversation.includePdfInContext !== undefined ? !!conversation.includePdfInContext : true;\r\n            h.includeNoteInContext = conversation.includeNoteInContext !== undefined ? !!conversation.includeNoteInContext : true;\r\n            h.renderChatHistory(); h.updateNoteInfo();\r\n            return;\r\n        }\r\n\r\n        h.chatHistory = [];\r\n        h.userMessageHistory = [];\r\n        h.messageHistoryIndex = -1;\r\n        h.currentDiscussionId = null;\r\n        h.includePdfInContext = true;\r\n        h.includeNoteInContext = true;\r\n        h.includedNotes = new Map();\r\n        h.renderChatHistory();\r\n    }\r\n\r\n    _normalize(history) {\r\n        return (history || [])\r\n            .map(m => normalizeMessage(m))\r\n            .filter(m => {\r\n                const t = (m.content || '').trim();\r\n                return t.length > 0 && !/^(\uD83D\uDCAD\\s*)?Thinking\\.\\.\\.$/i.test(t);\r\n            });\r\n    }\r\n\r\n    saveAssistantResponseToPath(notePath, discussionId, messageObj) {\r\n        const h = this.host;\r\n        try {\r\n            if (!h.conversations.has(notePath)) {\r\n                h.conversations.set(notePath, { history: [], userMessageHistory: [], includePdfInContext: true, includeNoteInContext: true, includedNotes: [] });\r\n            }\r\n            const conv = h.conversations.get(notePath);\r\n            conv.history = conv.history || [];\r\n            conv.history.push(messageObj);\r\n\r\n            if (discussionId) {\r\n                if (!h.discussions.has(notePath)) h.discussions.set(notePath, new Map());\r\n                const noteDiscussions = h.discussions.get(notePath);\r\n                if (!noteDiscussions.has(discussionId)) {\r\n                    noteDiscussions.set(discussionId, {\r\n                        id: discussionId,\r\n                        title: 'Orphaned discussion',\r\n                        noteFile: notePath,\r\n                        noteName: notePath.split('/').pop(),\r\n                        startTime: new Date(),\r\n                        lastUpdated: new Date(),\r\n                        messageCount: 1,\r\n                        history: [messageObj],\r\n                        userMessageHistory: []\r\n                    });\r\n                } else {\r\n                    const d = noteDiscussions.get(discussionId);\r\n                    d.history = d.history || [];\r\n                    d.history.push(messageObj);\r\n                    d.lastUpdated = new Date();\r\n                    d.messageCount = (d.history || []).length;\r\n                    noteDiscussions.set(discussionId, d);\r\n                }\r\n            }\r\n\r\n            if (h.plugin?.settings) {\r\n                try {\r\n                    const conversationsObj = {};\r\n                    for (const [p, c] of h.conversations.entries()) {\r\n                        conversationsObj[p] = { ...c, history: (c.history || []).slice(-50) };\r\n                    }\r\n                    h.plugin.settings.chatConversations = conversationsObj;\r\n                    h.plugin.saveSettings();\r\n                } catch (e) { console.warn('Failed to persist orphaned response to settings', e); }\r\n            }\r\n        } catch (e) {\r\n            console.error('Error saving assistant response to path', notePath, e);\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = { ChatPersistenceService };\r\n", "// Export the CSS used by the chat panel view so styles can be managed separately.\r\nconst chatPanelStyles = `\r\n            .chat-panel-container {\r\n                display: flex;\r\n                flex-direction: column;\r\n                height: 100%;\r\n                padding: 10px;\r\n            }\r\n\r\n            .chat-panel-header {\r\n                margin-bottom: 10px;\r\n                border-bottom: 1px solid var(--background-modifier-border);\r\n                padding-bottom: 10px;\r\n            }\r\n\r\n            .chat-title-row {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n                margin-bottom: 10px;\r\n            }\r\n\r\n            .chat-panel-title {\r\n                margin: 0;\r\n                font-size: 16px;\r\n                font-weight: 600;\r\n            }\r\n\r\n            .discussion-controls {\r\n                display: flex;\r\n                gap: 6px;\r\n                align-items: center;\r\n            }\r\n\r\n            .discussion-button {\r\n                padding: 4px 8px;\r\n                font-size: 11px;\r\n                border-radius: 4px;\r\n                border: 1px solid var(--background-modifier-border);\r\n                cursor: pointer;\r\n                background: var(--background-secondary);\r\n                color: var(--text-normal);\r\n                transition: all 0.2s ease;\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n\r\n            .discussion-button:hover {\r\n                background: var(--interactive-hover);\r\n                transform: translateY(-1px);\r\n            }\r\n\r\n            .new-discussion-button {\r\n                background: var(--interactive-accent);\r\n                color: var(--text-on-accent);\r\n                border-color: var(--interactive-accent);\r\n            }\r\n\r\n            .history-button:hover,\r\n            .global-history-button:hover {\r\n                background: var(--text-accent);\r\n                color: var(--text-on-accent);\r\n            }\r\n\r\n            .chat-note-info {\r\n                font-size: 12px;\r\n                color: var(--text-muted);\r\n            }\r\n\r\n            .chat-current-note .note-name {\r\n                font-weight: 500;\r\n                color: var(--text-normal);\r\n            }\r\n\r\n            .chat-current-note .note-status {\r\n                margin-top: 2px;\r\n            }\r\n\r\n            .chat-no-note {\r\n                text-align: center;\r\n                padding: 10px;\r\n                background: var(--background-secondary);\r\n                border-radius: 4px;\r\n            }\r\n\r\n            .no-note-message {\r\n                font-weight: 500;\r\n                margin-bottom: 4px;\r\n            }\r\n\r\n            .no-note-help {\r\n                font-size: 11px;\r\n                opacity: 0.7;\r\n            }\r\n\r\n            .chat-messages-area {\r\n                flex: 1;\r\n                overflow-y: auto;\r\n                margin-bottom: 10px;\r\n                border: 1px solid var(--background-modifier-border);\r\n                border-radius: 4px;\r\n                padding: 10px;\r\n                min-height: 200px;\r\n            }\r\n\r\n            /* Ensure text selection is enabled inside the chat messages */\r\n            .chat-messages-area,\r\n            .chat-message,\r\n            .chat-message-header,\r\n            .chat-message-content,\r\n            .chat-message-content * {\r\n                -webkit-user-select: text;\r\n                -ms-user-select: text;\r\n                user-select: text;\r\n            }\r\n\r\n            .chat-message {\r\n                margin-bottom: 15px;\r\n                padding: 8px;\r\n                border-radius: 6px;\r\n                position: relative;\r\n                transition: all 0.2s ease;\r\n            }\r\n\r\n            .chat-message:hover {\r\n                transform: translateY(-1px);\r\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n            }\r\n\r\n            .chat-message.typing {\r\n                animation: typing-pulse 1.5s infinite;\r\n            }\r\n\r\n            @keyframes typing-pulse {\r\n                0%, 100% { opacity: 1; }\r\n                50% { opacity: 0.7; }\r\n            }\r\n\r\n            .chat-message-user {\r\n                background: var(--background-secondary);\r\n                margin-left: 20px;\r\n                border-left: 3px solid var(--interactive-accent);\r\n            }\r\n\r\n            .chat-message-assistant {\r\n                background: var(--background-primary-alt);\r\n                margin-right: 20px;\r\n                border-left: 3px solid var(--text-accent);\r\n            }\r\n\r\n            .chat-message-system {\r\n                background: var(--background-modifier-error);\r\n                text-align: center;\r\n                font-style: italic;\r\n                margin: 10px;\r\n            }\r\n\r\n            .chat-message-header {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                margin-bottom: 5px;\r\n                font-size: 11px;\r\n                opacity: 0.7;\r\n            }\r\n\r\n            .chat-message-role {\r\n                font-weight: 500;\r\n            }\r\n\r\n            .chat-message-content {\r\n                white-space: pre-wrap;\r\n                line-height: 1.4;\r\n                margin-bottom: 5px;\r\n            }\r\n\r\n            .chat-message-content code {\r\n                background: var(--code-background);\r\n                padding: 2px 4px;\r\n                border-radius: 3px;\r\n                font-family: var(--font-monospace);\r\n                font-size: 0.9em;\r\n            }\r\n\r\n            .chat-message-content strong {\r\n                font-weight: 600;\r\n                color: var(--text-normal);\r\n            }\r\n\r\n            .chat-message-content em {\r\n                font-style: italic;\r\n                color: var(--text-muted);\r\n            }\r\n\r\n            .chat-message-actions {\r\n                display: flex;\r\n                gap: 4px;\r\n                margin-top: 5px;\r\n                opacity: 0;\r\n                transition: opacity 0.2s ease;\r\n            }\r\n\r\n            .chat-message:hover .chat-message-actions {\r\n                opacity: 1;\r\n            }\r\n\r\n            .chat-action-button {\r\n                background: none;\r\n                border: none;\r\n                cursor: pointer;\r\n                padding: 2px 4px;\r\n                border-radius: 3px;\r\n                font-size: 12px;\r\n                opacity: 0.7;\r\n                transition: all 0.2s ease;\r\n                /* Prevent selecting the button label when dragging text across */\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n\r\n            .chat-action-button:hover {\r\n                opacity: 1;\r\n                background: var(--background-modifier-hover);\r\n            }\r\n\r\n            .chat-delete-button:hover {\r\n                background: var(--background-modifier-error);\r\n                color: var(--text-on-accent);\r\n            }\r\n\r\n            .chat-input-area {\r\n                border-top: 1px solid var(--background-modifier-border);\r\n                padding-top: 10px;\r\n            }\r\n\r\n            .chat-input-container {\r\n                display: flex;\r\n                gap: 8px;\r\n                margin-bottom: 8px;\r\n                align-items: flex-end;\r\n            }\r\n\r\n            .chat-message-input {\r\n                flex: 1;\r\n                resize: none;\r\n                min-height: 60px;\r\n                max-height: 200px;\r\n                padding: 8px;\r\n                border: 1px solid var(--background-modifier-border);\r\n                border-radius: 4px;\r\n                background: var(--background-primary);\r\n                color: var(--text-normal);\r\n                font-family: inherit;\r\n                line-height: 1.4;\r\n                transition: border-color 0.2s ease, box-shadow 0.2s ease;\r\n            }\r\n\r\n            .chat-message-input:focus {\r\n                outline: none;\r\n                border-color: var(--interactive-accent);\r\n                box-shadow: 0 0 0 2px rgba(var(--interactive-accent-rgb), 0.2);\r\n            }\r\n\r\n            .chat-send-button {\r\n                padding: 8px 16px;\r\n                background: var(--interactive-accent);\r\n                color: white;\r\n                border: none;\r\n                border-radius: 4px;\r\n                cursor: pointer;\r\n                font-weight: 500;\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n\r\n            .chat-send-button:hover {\r\n                background: var(--interactive-accent-hover);\r\n            }\r\n\r\n            .chat-clear-button {\r\n                padding: 4px 8px;\r\n                background: var(--background-secondary);\r\n                color: var(--text-muted);\r\n                border: 1px solid var(--background-modifier-border);\r\n                border-radius: 4px;\r\n                cursor: pointer;\r\n                font-size: 11px;\r\n                transition: all 0.2s ease;\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n\r\n            .chat-send-controls { display:flex; flex-direction:column; gap:8px; align-items:flex-end; margin-left:8px; }\r\n            .chat-send-controls .chat-send-button { padding: 8px 16px; }\r\n            .chat-send-controls .chat-clear-button { padding: 4px 8px; }\r\n\r\n            .chat-clear-button:hover { background: var(--interactive-hover); transform: translateY(-1px); }\r\n\r\n            /* PDF toggle button styles */\r\n            .pdf-toggle-button {\r\n                padding: 2px 6px;\r\n                font-size: 11px;\r\n                border-radius: 4px;\r\n                border: 1px solid var(--background-modifier-border);\r\n                cursor: pointer;\r\n                background: var(--background-secondary);\r\n                color: var(--text-normal);\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n            .pdf-toggle-button.on {\r\n                background: var(--interactive-accent);\r\n                color: var(--text-on-accent);\r\n                border-color: var(--interactive-accent);\r\n            }\r\n            .pdf-toggle-button.off {\r\n                background: var(--background-secondary);\r\n                color: var(--text-muted);\r\n            }\r\n            /* Note toggle button styles (matches PDF toggle) */\r\n            .note-toggle-button {\r\n                padding: 2px 6px;\r\n                font-size: 11px;\r\n                border-radius: 4px;\r\n                border: 1px solid var(--background-modifier-border);\r\n                cursor: pointer;\r\n                background: var(--background-secondary);\r\n                color: var(--text-normal);\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n            .note-toggle-button.on {\r\n                background: var(--interactive-accent);\r\n                color: var(--text-on-accent);\r\n                border-color: var(--interactive-accent);\r\n            }\r\n            .note-toggle-button.off {\r\n                background: var(--background-secondary);\r\n                color: var(--text-muted);\r\n            }\r\n\r\n            /* Discussion History Panel Styles */\r\n            .discussion-history-panel,\r\n            .global-history-panel {\r\n                background: var(--background-primary-alt);\r\n                border: 1px solid var(--background-modifier-border);\r\n                border-radius: 6px;\r\n                margin-bottom: 10px;\r\n                max-height: 300px;\r\n                overflow-y: auto;\r\n            }\r\n\r\n            .history-panel-header {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n                padding: 8px 12px;\r\n                border-bottom: 1px solid var(--background-modifier-border);\r\n                background: var(--background-secondary);\r\n                border-radius: 6px 6px 0 0;\r\n            }\r\n\r\n            .history-panel-header h4 {\r\n                margin: 0;\r\n                font-size: 14px;\r\n                font-weight: 600;\r\n                color: var(--text-normal);\r\n            }\r\n\r\n            .history-close-button {\r\n                background: none;\r\n                border: none;\r\n                cursor: pointer;\r\n                padding: 2px 6px;\r\n                border-radius: 3px;\r\n                color: var(--text-muted);\r\n                font-size: 16px;\r\n                line-height: 1;\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n\r\n            .history-close-button:hover {\r\n                background: var(--background-modifier-hover);\r\n                color: var(--text-normal);\r\n            }\r\n\r\n            .history-panel-content {\r\n                padding: 8px;\r\n                max-height: 250px;\r\n                overflow-y: auto;\r\n            }\r\n\r\n            .history-empty {\r\n                text-align: center;\r\n                color: var(--text-muted);\r\n                font-style: italic;\r\n                padding: 20px;\r\n            }\r\n\r\n            .discussion-item {\r\n                padding: 8px;\r\n                margin-bottom: 6px;\r\n                border: 1px solid var(--background-modifier-border);\r\n                border-radius: 4px;\r\n                background: var(--background-primary);\r\n                transition: all 0.2s ease;\r\n            }\r\n\r\n            .discussion-item:hover {\r\n                background: var(--background-modifier-hover);\r\n                transform: translateY(-1px);\r\n                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n            }\r\n\r\n            .discussion-item.current-discussion {\r\n                border-color: var(--interactive-accent);\r\n                background: var(--background-modifier-success);\r\n            }\r\n\r\n            .discussion-item-header {\r\n                margin-bottom: 4px;\r\n            }\r\n\r\n            .discussion-title {\r\n                font-weight: 500;\r\n                color: var(--text-normal);\r\n                font-size: 13px;\r\n                margin-bottom: 2px;\r\n                line-height: 1.2;\r\n            }\r\n\r\n            .discussion-note-info {\r\n                font-size: 11px;\r\n                color: var(--text-muted);\r\n                margin-bottom: 2px;\r\n            }\r\n\r\n            .discussion-meta {\r\n                font-size: 11px;\r\n                color: var(--text-muted);\r\n            }\r\n\r\n            .discussion-actions {\r\n                display: flex;\r\n                gap: 4px;\r\n                margin-top: 6px;\r\n            }\r\n\r\n            .discussion-action-button {\r\n                padding: 2px 6px;\r\n                font-size: 10px;\r\n                border-radius: 3px;\r\n                border: 1px solid var(--background-modifier-border);\r\n                cursor: pointer;\r\n                background: var(--background-secondary);\r\n                color: var(--text-normal);\r\n                transition: all 0.2s ease;\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n            }\r\n\r\n            .discussion-action-button:hover {\r\n                background: var(--interactive-hover);\r\n                transform: translateY(-1px);\r\n            }\r\n\r\n            .discussion-action-button.delete-button {\r\n                background: var(--background-modifier-error);\r\n                color: var(--text-on-accent);\r\n                border-color: var(--background-modifier-error);\r\n            }\r\n\r\n            .discussion-action-button.delete-button:hover {\r\n                background: var(--background-modifier-error-hover);\r\n            }\r\n\r\n            .global-discussion-item {\r\n                border-left: 3px solid var(--text-accent);\r\n            }\r\n\r\n            .chat-message-wrapper { font-family: var(--font-family); }\r\n            .chat-message-wrapper { margin: 8px 12px; padding: 8px; border-radius: 6px; }\r\n            .user-message { background: rgba(50,120,255,0.06); border-left: 3px solid rgba(50,120,255,0.9); }\r\n            .assistant-message { background: rgba(255,255,255,0.02); border-left: 3px solid rgba(100,100,100,0.15); }\r\n            .system-message { background: rgba(180,20,20,0.06); border-left: 3px solid rgba(180,20,20,0.9); }\r\n            .chat-message-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:6px; font-size:12px; color:var(--text-muted); }\r\n            .chat-message-role { font-weight:600; }\r\n            .chat-message-content .message-text { white-space:pre-wrap; }\r\n\r\n            /* Collapsible long message styles */\r\n            .collapsed-message { background: rgba(0,0,0,0.03); padding:8px; border-radius:4px; }\r\n            .collapsed-message .collapsed-text { color: var(--text-muted); }\r\n            .collapsed-message .full-text { white-space:pre-wrap; margin-top:6px; }\r\n            .collapse-toggle { margin-top:6px; background:transparent; border:0; color:var(--text-link); cursor:pointer; padding:2px  4px; }\r\n\r\n            /* Typing placeholder */\r\n            .typing { opacity: 0.8; font-style: italic; }\r\n        `;\r\n\r\nmodule.exports = chatPanelStyles;\r\n", "// UI helpers: rendering chat messages, history panels, styles, and textarea resize\r\nconst { ConfirmModal } = require('../confirm-modal');\r\nconst { renderMessage } = require('../message-renderer');\r\nconst { notify } = require('../notifications');\r\n\r\nclass ChatUIHelpers {\r\n    constructor(host) { this.host = host; }\r\n\r\n    renderChatHistory() {\r\n        const h = this.host;\r\n        if (!h.chatMessagesEl) return;\r\n        h.chatMessagesEl.empty();\r\n        h.chatHistory.forEach(message => {\r\n            renderMessage(h.chatMessagesEl, message, {\r\n                app: h.app,\r\n                ConfirmModal,\r\n                onDelete: (id) => { h.deleteMessage(id); notify('Message deleted'); }\r\n            });\r\n        });\r\n        if (!h.isUserScrolling) h.chatMessagesEl.scrollTop = h.chatMessagesEl.scrollHeight;\r\n    }\r\n\r\n    updateNoteInfo() {\r\n        const h = this.host;\r\n        const noteInfoEl = h.contentEl.querySelector('.chat-note-info');\r\n        if (!noteInfoEl) return;\r\n        noteInfoEl.empty();\r\n\r\n        if (h.currentNoteFile) {\r\n            const hasPdf = h.currentPdfContent.length > 0;\r\n            const isPdf = h.currentNoteFile.extension === 'pdf';\r\n            const paperData = !isPdf ? h.plugin.paperService?.paperIndex?.get(h.currentNoteFile.path) : null;\r\n            let pdfFile = null;\r\n            if (isPdf) {\r\n                pdfFile = h.currentNoteFile.path;\r\n            } else if (paperData && paperData.frontmatter) {\r\n                pdfFile = paperData.frontmatter.pdf_file || paperData.frontmatter.pdf || paperData.frontmatter.pdf_path || paperData.frontmatter.pdfPath || null;\r\n            } else {\r\n                try {\r\n                    const fm = h.app.metadataCache.getFileCache(h.currentNoteFile)?.frontmatter;\r\n                    if (fm) pdfFile = fm.pdf_file || fm.pdf || fm.pdf_path || fm.pdfPath || null;\r\n                } catch (_) {}\r\n            }\r\n\r\n            const wrapper = noteInfoEl.createEl('div', { cls: 'chat-current-note' });\r\n            wrapper.createEl('div', { cls: 'note-name', text: h.currentNoteFile.basename + (isPdf ? ' (PDF)' : '') });\r\n            const status = wrapper.createEl('div', { cls: 'note-status' });\r\n\r\n            if (!isPdf) {\r\n                status.createSpan({ text: '\uD83D\uDCDD ' });\r\n                const noteBtn = status.createEl('button', {\r\n                    cls: `note-toggle-button ${h.includeNoteInContext ? 'on' : 'off'}`,\r\n                    attr: { title: h.includeNoteInContext ? 'Click to exclude Note from LLM context' : 'Click to include Note in LLM context' }\r\n                });\r\n                noteBtn.textContent = `Note (${h.currentNoteContent.length} chars)`;\r\n                noteBtn.addEventListener('click', async () => {\r\n                    h.includeNoteInContext = !h.includeNoteInContext;\r\n                    await h.saveConversation();\r\n                    h.updateNoteInfo();\r\n                });\r\n            } else {\r\n                status.createSpan({ text: `\uD83D\uDCC4 PDF (${h.currentPdfContent.length} chars)` });\r\n            }\r\n\r\n            if (hasPdf && !isPdf) {\r\n                status.createSpan({ text: ' \u2022 ' });\r\n                const pdfBtn = status.createEl('button', {\r\n                    cls: `pdf-toggle-button ${h.includePdfInContext ? 'on' : 'off'}`,\r\n                    attr: { title: h.includePdfInContext ? 'Click to exclude PDF from LLM context' : 'Click to include PDF in LLM context' }\r\n                });\r\n                pdfBtn.textContent = `\uD83D\uDCCB PDF file (${h.currentPdfContent.length} chars)`;\r\n                pdfBtn.addEventListener('click', async () => {\r\n                    h.includePdfInContext = !h.includePdfInContext;\r\n                    await h.saveConversation();\r\n                    h.updateNoteInfo();\r\n                });\r\n            } else if (pdfFile && h.pdfExtractionError) {\r\n                status.createSpan({ text: ' \u2022 ' });\r\n                if (h.pdfExtractionError.includes('PDF.js not available')) {\r\n                    status.createSpan({ text: '\u26A0\uFE0F PDF found but PDF.js not loaded - try opening a PDF file first' });\r\n                } else {\r\n                    status.createSpan({ text: `\u26A0\uFE0F PDF extraction failed: ${h.pdfExtractionError}` });\r\n                }\r\n            } else if (pdfFile) {\r\n                status.createSpan({ text: ' \u2022 ' });\r\n                status.createSpan({ text: isPdf ? '\uD83D\uDCC4 PDF loaded' : `\u26A0\uFE0F PDF file found but not loaded: ${pdfFile}` });\r\n            } else {\r\n                status.createSpan({ text: ' \u2022 No PDF file in frontmatter' });\r\n            }\r\n\r\n            const statusRow = wrapper.createEl('div', { cls: 'chat-status-row' });\r\n            if (h._pdfExtractionInProgress) {\r\n                statusRow.createEl('span', { text: '\uD83D\uDD04 Extracting PDF...' });\r\n            } else if (h.pdfExtractionError) {\r\n                statusRow.createEl('span', { text: `\u26A0\uFE0F PDF error: ${h.pdfExtractionError}` });\r\n            }\r\n            if (h._lastSavedAt) {\r\n                try { statusRow.createEl('span', { text: ` \u2022 Last saved: ${h._lastSavedAt.toLocaleString()}` }); } catch (e) {}\r\n            }\r\n        } else {\r\n            const noNote = noteInfoEl.createEl('div', { cls: 'chat-no-note' });\r\n            noNote.createEl('div', { cls: 'no-note-message', text: 'No active note' });\r\n            noNote.createEl('div', { cls: 'no-note-help', text: 'Open a markdown file to start chatting about it' });\r\n        }\r\n\r\n        if (this.host.includedNotes.size > 0) {\r\n            const includedWrapper = noteInfoEl.createEl('div', { cls: 'chat-included-notes' });\r\n            for (const [path, entry] of this.host.includedNotes.entries()) {\r\n                const row = includedWrapper.createEl('div', { cls: 'included-note-row' });\r\n                row.createEl('div', { cls: 'included-note-name', text: entry.name || path });\r\n                const controls = row.createEl('div', { cls: 'included-note-controls' });\r\n                const toggleBtn = controls.createEl('button', {\r\n                    cls: `pdf-toggle-button ${entry.includeInContext ? 'on' : 'off'}`,\r\n                    attr: { title: entry.includeInContext ? 'Exclude this note from context' : 'Include this note in context' }\r\n                });\r\n                toggleBtn.textContent = entry.name || path;\r\n                toggleBtn.addEventListener('click', async () => {\r\n                    entry.includeInContext = !entry.includeInContext;\r\n                    this.host.includedNotes.set(path, entry);\r\n                    await this.host.saveConversation();\r\n                    this.host.updateNoteInfo();\r\n                });\r\n\r\n                if (!entry.includeInContext) {\r\n                    this.host.includedNotes.delete(path);\r\n                    this.host.updateNoteInfo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addStyles() {\r\n        const styleId = 'chat-panel-styles';\r\n        if (document.getElementById(styleId)) return;\r\n        const style = document.createElement('style');\r\n        style.id = styleId;\r\n        try { style.textContent = require('../chat-panel-styles'); }\r\n        catch (e) { style.textContent = '.chat-panel-container { padding: 8px; }'; console.warn('Fallback styles', e); }\r\n        document.head.appendChild(style);\r\n    }\r\n\r\n    renderDiscussionHistory() {\r\n        const h = this.host;\r\n        if (!h.discussionHistoryPanel) return;\r\n        if (h.showingDiscussionHistory) {\r\n            h.discussionHistoryPanel.style.display = 'block';\r\n            h.discussionHistoryPanel.empty();\r\n\r\n            const header = h.discussionHistoryPanel.createEl('div', { cls: 'history-panel-header' });\r\n            header.createEl('h4', { text: 'Discussion History for this Note' });\r\n            const closeBtn = header.createEl('button', { cls: 'history-close-button', text: '\u2715' });\r\n            closeBtn.addEventListener('click', () => {\r\n                h.showingDiscussionHistory = false;\r\n                h.discussionHistoryPanel.style.display = 'none';\r\n            });\r\n\r\n            const content = h.discussionHistoryPanel.createEl('div', { cls: 'history-panel-content' });\r\n            if (!h.currentNoteFile) {\r\n                content.createEl('div', { text: 'No note selected', cls: 'history-empty' });\r\n                return;\r\n            }\r\n            const noteDiscussions = h.discussions.get(h.currentNoteFile.path);\r\n            if (!noteDiscussions || noteDiscussions.size === 0) {\r\n                content.createEl('div', { text: 'No discussions yet for this note', cls: 'history-empty' });\r\n                return;\r\n            }\r\n            const discussionsArray = Array.from(noteDiscussions.values())\r\n                .sort((a, b) => new Date(b.lastUpdated || b.startTime) - new Date(a.lastUpdated || a.startTime));\r\n            discussionsArray.forEach((discussion) => {\r\n                const item = content.createEl('div', { cls: 'discussion-item' });\r\n                const itemHeader = item.createEl('div', { cls: 'discussion-item-header' });\r\n                itemHeader.createEl('div', { cls: 'discussion-title', text: discussion.title });\r\n                const meta = itemHeader.createEl('div', { cls: 'discussion-meta' });\r\n                const date = new Date(discussion.lastUpdated || discussion.startTime);\r\n                meta.createEl('span', { text: date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) });\r\n                meta.createEl('span', { text: ` \u2022 ${discussion.messageCount} messages` });\r\n                const actions = item.createEl('div', { cls: 'discussion-actions' });\r\n                const loadBtn = actions.createEl('button', { cls: 'discussion-action-button', text: 'Load', attr: { type: 'button', 'aria-label': `Load discussion ${discussion.title}` } });\r\n                loadBtn.addEventListener('click', () => { h.loadDiscussion(discussion.id); });\r\n                const deleteBtn = actions.createEl('button', { cls: 'discussion-action-button delete-button', text: 'Delete', attr: { type: 'button', 'aria-label': `Delete discussion ${discussion.title}` } });\r\n                deleteBtn.addEventListener('click', () => {\r\n                    const modal = new ConfirmModal(h.app, `Delete discussion \"${discussion.title}\"?`, () => { h.deleteDiscussion(discussion.id); });\r\n                    modal.open();\r\n                });\r\n                if (discussion.id === h.currentDiscussionId) item.addClass('current-discussion');\r\n            });\r\n        } else {\r\n            h.discussionHistoryPanel.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    renderGlobalHistory() {\r\n        const h = this.host;\r\n        if (!h.globalHistoryPanel) return;\r\n        if (h.showingGlobalHistory) {\r\n            h.globalHistoryPanel.style.display = 'block';\r\n            h.globalHistoryPanel.empty();\r\n\r\n            const header = h.globalHistoryPanel.createEl('div', { cls: 'history-panel-header' });\r\n            header.createEl('h4', { text: 'Global Discussion History' });\r\n            const closeBtn = header.createEl('button', { cls: 'history-close-button', text: '\u2715' });\r\n            closeBtn.addEventListener('click', () => {\r\n                h.showingGlobalHistory = false;\r\n                h.globalHistoryPanel.style.display = 'none';\r\n            });\r\n\r\n            const content = h.globalHistoryPanel.createEl('div', { cls: 'history-panel-content' });\r\n            let globalList = h.globalDiscussionHistory || [];\r\n            if ((!globalList || globalList.length === 0) && h.discussions && h.discussions.size > 0) {\r\n                const synthesized = [];\r\n                for (const [notePath, noteMap] of h.discussions.entries()) {\r\n                    if (!noteMap) continue;\r\n                    if (noteMap instanceof Map) {\r\n                        for (const [id, d] of noteMap.entries()) {\r\n                            try {\r\n                                synthesized.push({\r\n                                    id: d.id || id,\r\n                                    title: d.title || (d.history && d.history.length ? (d.history.find(m=>m.role==='user')?.content||'Discussion') : 'Discussion'),\r\n                                    noteFile: d.notePath || notePath,\r\n                                    noteName: d.noteName || (notePath.split('/').pop() || notePath),\r\n                                    lastUpdated: d.lastUpdated || d.startTime || new Date(),\r\n                                    startTime: d.startTime || new Date(),\r\n                                    messageCount: d.messageCount || (d.history || []).length,\r\n                                    history: (d.history || []).slice(-3)\r\n                                });\r\n                            } catch (e) {}\r\n                        }\r\n                    } else if (typeof noteMap === 'object') {\r\n                        for (const [id, d] of Object.entries(noteMap)) {\r\n                            synthesized.push({\r\n                                id: d.id || id,\r\n                                title: d.title || 'Discussion',\r\n                                noteFile: d.notePath || notePath,\r\n                                noteName: d.noteName || (notePath.split('/').pop() || notePath),\r\n                                lastUpdated: d.lastUpdated || d.startTime || new Date(),\r\n                                startTime: d.startTime || new Date(),\r\n                                messageCount: d.messageCount || (d.history || []).length,\r\n                                history: (d.history || []).slice(-3)\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                synthesized.sort((a,b) => new Date(b.lastUpdated) - new Date(a.lastUpdated));\r\n                globalList = synthesized;\r\n            }\r\n\r\n            if (!globalList || globalList.length === 0) {\r\n                content.createEl('div', { text: 'No discussions yet', cls: 'history-empty' });\r\n                return;\r\n            }\r\n\r\n            globalList.forEach((discussion) => {\r\n                const item = content.createEl('div', { cls: 'discussion-item global-discussion-item' });\r\n                const itemHeader = item.createEl('div', { cls: 'discussion-item-header' });\r\n                itemHeader.createEl('div', { cls: 'discussion-title', text: discussion.title });\r\n                itemHeader.createEl('div', { cls: 'discussion-note-info', text: `\uD83D\uDCC4 ${discussion.noteName}` });\r\n                const meta = itemHeader.createEl('div', { cls: 'discussion-meta' });\r\n                const date = new Date(discussion.lastUpdated || discussion.startTime);\r\n                meta.createEl('span', { text: date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) });\r\n                meta.createEl('span', { text: ` \u2022 ${discussion.messageCount} messages` });\r\n                const actions = item.createEl('div', { cls: 'discussion-actions' });\r\n                const openNoteBtn = actions.createEl('button', { cls: 'discussion-action-button', text: 'Open Note', attr: { type: 'button', 'aria-label': `Open note for discussion ${discussion.title}` } });\r\n                openNoteBtn.addEventListener('click', async () => {\r\n                    const file = h.app.vault.getAbstractFileByPath(discussion.noteFile);\r\n                    if (file) {\r\n                        await h.app.workspace.getLeaf().openFile(file);\r\n                        setTimeout(() => { h.loadDiscussion(discussion.id, discussion.noteFile); }, 100);\r\n                    } else {\r\n                        h.addMessageToHistory('system', `Note not found: ${discussion.noteFile}`);\r\n                    }\r\n                });\r\n                const deleteBtn = actions.createEl('button', { cls: 'discussion-action-button delete-button', text: 'Delete' });\r\n                deleteBtn.addEventListener('click', () => {\r\n                    const modal = new ConfirmModal(h.app, `Delete discussion \"${discussion.title}\"?`, () => { h.deleteDiscussion(discussion.id, discussion.noteFile); });\r\n                    modal.open();\r\n                });\r\n                if (discussion.id === h.currentDiscussionId) item.addClass('current-discussion');\r\n            });\r\n        } else {\r\n            h.globalHistoryPanel.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = { ChatUIHelpers };\r\n", "// Utility helpers for chat panel view\r\nfunction debounceFactory() {\r\n    let timer = null;\r\n    return (func, wait) => {\r\n        return (...args) => {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(() => func.apply(this, args), wait);\r\n        };\r\n    };\r\n}\r\n\r\nfunction createAutoResizer(textareaRef, maxHeight = 200) {\r\n    return function autoResize() {\r\n        const textarea = textareaRef;\r\n        if (!textarea) return;\r\n        textarea.style.height = 'auto';\r\n        const newHeight = Math.min(textarea.scrollHeight, maxHeight);\r\n        textarea.style.height = newHeight + 'px';\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    debounceFactory,\r\n    createAutoResizer\r\n};\r\n", "const { ItemView, TFile } = require('obsidian');\r\nconst { ConfirmModal } = require('./confirm-modal');\r\nconst { generateDiscussionId: _genDiscussionId, normalizeMessage } = require('./chat-utils');\r\nconst { renderMessage } = require('./message-renderer');\r\nconst { notify, notifyError } = require('./notifications');\r\n// Services\r\nconst { ChatStateService } = require('./services/chat-state-service');\r\nconst { ChatPersistenceService } = require('./services/chat-persistence-service');\r\nconst { ChatUIHelpers } = require('./services/chat-ui-helpers');\r\n\r\nconst CHAT_PANEL_VIEW_TYPE = \"chat-panel-view\";\r\n\r\nclass ChatPanelView extends ItemView {\r\n    constructor(leaf, settings, plugin) {\r\n        super(leaf);\r\n        this.settings = settings;\r\n        this.plugin = plugin;\r\n        // Current session state\r\n        this.chatHistory = [];\r\n        this.currentNoteContent = '';\r\n        this.currentPdfContent = '';\r\n        this.currentNoteFile = null;\r\n        this.messageHistoryIndex = -1;\r\n        this.userMessageHistory = [];\r\n        this.isUserScrolling = false;\r\n        \r\n        // Discussion management - unified architecture\r\n        this.currentDiscussionId = null;\r\n        this.discussions = new Map(); // discussionId -> DiscussionData\r\n        this.noteDiscussions = new Map(); // notePath -> Set<discussionId>\r\n        this.discussionIndex = new Map(); // discussionId -> { notePath, lastUpdated }\r\n        \r\n        // Context controls\r\n        this.includePdfInContext = true;\r\n        this.includeNoteInContext = true;\r\n        this.includedNotes = new Map(); // path -> { content, includeInContext, name }\r\n        \r\n        // UI state\r\n        this.showingDiscussionHistory = false;\r\n        this.showingGlobalHistory = false;\r\n        \r\n        // State management\r\n        this._saveInProgress = false;\r\n        this._pendingSave = false;\r\n        this._updateInProgress = false;\r\n        this._lastUpdateFile = null;\r\n        this._updateDebounceTimer = null;\r\n        this._pdfExtractionInProgress = false;\r\n        this._lastSavedAt = null;\r\n        this._lastDeletedMessage = null;\r\n        this._lastDeletedTimer = null;\r\n\r\n        // Legacy/state maps used throughout save/load paths\r\n        // Ensure they are initialized to avoid undefined access\r\n        this.conversations = new Map();\r\n        this.globalDiscussionHistory = [];\r\n\r\n        // Services\r\n        this.stateSvc = new ChatStateService(this);\r\n        this.persistSvc = new ChatPersistenceService(this);\r\n        this.uiSvc = new ChatUIHelpers(this);\r\n    }\r\n\r\n    getViewType() { \r\n        return CHAT_PANEL_VIEW_TYPE; \r\n    }\r\n    \r\n    getDisplayText() { \r\n        return \"Note Chat\"; \r\n    }\r\n    \r\n    getIcon() { \r\n        return \"message-circle\"; \r\n    }\r\n\r\n    async onOpen() {\r\n        this.renderView();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Debounced note update to prevent multiple rapid calls\r\n        // Use debounce factory from helpers to keep implementation shared/testable\r\n        if (!this._debounceFactory) {\r\n            try { this._debounceFactory = require('./chat-helpers').debounceFactory(); } catch (e) { this._debounceFactory = (f) => f; }\r\n        }\r\n        this._debouncedUpdateNote = this._debounceFactory(() => {\r\n            if (!this._updateInProgress) {\r\n                this._updateCurrentNote();\r\n            }\r\n        }, 100);\r\n\r\n        this.registerEvent(\r\n            this.app.workspace.on('active-leaf-change', () => {\r\n                this._debouncedUpdateNote();\r\n            })\r\n        );\r\n\r\n        // Only update on file modification if it's the current note\r\n        this.registerEvent(\r\n            this.app.vault.on('modify', (file) => {\r\n                if (this.currentNoteFile && file?.path === this.currentNoteFile.path) {\r\n                    // Only update content, don't reload entire discussion\r\n                    this._updateNoteContent(file);\r\n                }\r\n            })\r\n        );\r\n        \r\n        // Keep included notes up-to-date if files change\r\n        this.registerEvent(\r\n            this.app.vault.on('modify', (file) => {\r\n                if (!file) return;\r\n                const path = file.path;\r\n                if (this.includedNotes.has(path)) {\r\n                    this._loadIncludedNoteEntry(path, file).catch(err => {\r\n                        notify(`Failed to refresh included note: ${path}`);\r\n                    });\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // Debounce implementation moved to `chat-helpers.js` (use this._debounceFactory())\r\n\r\n    async _updateNoteContent(file) {\r\n        if (!file || file.path !== this.currentNoteFile?.path) return;\r\n        \r\n        try {\r\n            if (file.extension === 'md') {\r\n                this.currentNoteContent = await this.app.vault.read(file);\r\n                this.updateNoteInfo();\r\n            }\r\n        } catch (error) {\r\n            console.warn('Failed to update note content:', error);\r\n        }\r\n    }\r\n\r\n    async _updateCurrentNote() {\r\n        // Prevent concurrent updates\r\n        if (this._updateInProgress) return;\r\n        this._updateInProgress = true;\r\n        \r\n        try {\r\n            const activeFile = this.app.workspace.getActiveFile();\r\n\r\n            // Check if we're already processing this file\r\n            if (this._lastUpdateFile && activeFile?.path === this._lastUpdateFile) {\r\n                return;\r\n            }\r\n            this._lastUpdateFile = activeFile?.path || null;\r\n\r\n            // When there's no active file, clear state\r\n            if (!activeFile) {\r\n                if (this.currentNoteFile) {\r\n                    await this.saveConversation();\r\n                }\r\n                this._clearNoteState();\r\n                return;\r\n            }\r\n\r\n            // Save current state if switching files\r\n            if (this.currentNoteFile && this.currentNoteFile.path !== activeFile.path) {\r\n                await this.saveConversation();\r\n                this._clearNoteState();\r\n            }\r\n\r\n            this.currentNoteFile = activeFile;\r\n            \r\n            // Load content based on file type\r\n            await this._loadNoteContent(activeFile);\r\n            \r\n            // Load discussions for this note using new architecture\r\n            await this._loadDiscussionsForNote(activeFile.path);\r\n            \r\n            // Update UI\r\n                this.updateNoteInfo();\r\n                this.renderChatHistory();\r\n            \r\n        } finally {\r\n            this._updateInProgress = false;\r\n        }\r\n    }\r\n\r\n    _clearNoteState() {\r\n        this.currentNoteFile = null;\r\n        this.currentNoteContent = '';\r\n        this.currentPdfContent = '';\r\n        this.pdfExtractionError = null;\r\n        this.chatHistory = [];\r\n        this.userMessageHistory = [];\r\n        this.messageHistoryIndex = -1;\r\n        this.currentDiscussionId = null;\r\n        this.hideHistoryPanels();\r\n        this.updateNoteInfo();\r\n        this.renderChatHistory();\r\n    }\r\n\r\n    async _loadNoteContent(activeFile) {\r\n\r\n        // Handle Markdown note\r\n        if (activeFile.extension === 'md') {\r\n            try {\r\n                this.currentNoteContent = await this.app.vault.read(activeFile);\r\n                this.currentPdfContent = '';\r\n                this.pdfExtractionError = null;\r\n                const paperData = this.plugin.paperService?.paperIndex?.get(activeFile.path);\r\n\r\n                // Try detecting PDF reference from multiple sources/keys\r\n                let fmPdf = null;\r\n                if (paperData && paperData.frontmatter) {\r\n                    fmPdf = paperData.frontmatter.pdf_file || paperData.frontmatter.pdf || paperData.frontmatter.pdf_path || paperData.frontmatter.pdfPath || null;\r\n                }\r\n                if (!fmPdf) {\r\n                    try {\r\n                        const fm = this.app.metadataCache.getFileCache(activeFile)?.frontmatter;\r\n                        if (fm) {\r\n                            fmPdf = fm.pdf_file || fm.pdf || fm.pdf_path || fm.pdfPath || null;\r\n                        }\r\n                    } catch (_) {}\r\n                }\r\n\r\n                if (fmPdf) {\r\n                    try {\r\n                        let logicalPath = String(fmPdf);\r\n                        if (!logicalPath.includes('/') && activeFile.parent && activeFile.parent.path) {\r\n                            logicalPath = `${activeFile.parent.path}/${logicalPath}`;\r\n                        }\r\n\r\n                        let effectivePath = logicalPath;\r\n                        if (this.plugin.fileService?.resolveLogicalToEffectivePath) {\r\n                            effectivePath = await this.plugin.fileService.resolveLogicalToEffectivePath(logicalPath);\r\n                        }\r\n\r\n                        // Try multiple resolution strategies\r\n                        let pdfFile = this.app.vault.getAbstractFileByPath(effectivePath);\r\n                        if (!pdfFile && !/\\.pdf$/i.test(effectivePath)) {\r\n                            pdfFile = this.app.vault.getAbstractFileByPath(effectivePath + '.pdf');\r\n                        }\r\n                        if (!pdfFile) {\r\n                            const base = effectivePath.replace(/\\\\/g, '/').split('/').pop().replace(/\\.pdf$/i, '');\r\n                            const files = this.app.vault.getFiles();\r\n                            const match = files.find(f => f instanceof TFile && f.extension === 'pdf' && f.basename.toLowerCase() === base.toLowerCase());\r\n                            if (match) pdfFile = match;\r\n                        }\r\n\r\n                        if (pdfFile instanceof TFile && pdfFile.extension === 'pdf') {\r\n                            this._pdfExtractionInProgress = true;\r\n                            this.updateNoteInfo();\r\n                            try {\r\n                                this.currentPdfContent = await this.plugin.pdfService.extractTextFromPdf(pdfFile);\r\n                                notify(`PDF text extracted and included for ${pdfFile.basename}`);\r\n                                this.pdfExtractionError = null;\r\n                            } catch (pdfExtractionError) {\r\n                                this.pdfExtractionError = pdfExtractionError.message;\r\n                                notifyError(`PDF extraction failed for ${pdfFile.basename}: ${this.pdfExtractionError}`, pdfExtractionError);\r\n                                this.currentPdfContent = '';\r\n                            } finally {\r\n                                this._pdfExtractionInProgress = false;\r\n                                this.updateNoteInfo();\r\n                            }\r\n                        }\r\n                    } catch (_) {\r\n                        // ignore\r\n                    }\r\n                }\r\n\r\n                this.updateNoteInfo();\r\n                await this.loadConversation();\r\n            } catch (_) {\r\n                // ignore\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Handle PDF file directly\r\n        if (activeFile.extension === 'pdf') {\r\n            try {\r\n                this.currentNoteContent = '';\r\n                this.currentPdfContent = '';\r\n                this.pdfExtractionError = null;\r\n\r\n                try {\r\n                    this._pdfExtractionInProgress = true;\r\n                    this.updateNoteInfo();\r\n                    this.currentPdfContent = await this.plugin.pdfService.extractTextFromPdf(activeFile);\r\n                    notify(`PDF text extracted and included for ${activeFile.basename}`);\r\n                    this.pdfExtractionError = null;\r\n                } catch (pdfErr) {\r\n                    this.pdfExtractionError = pdfErr?.message || String(pdfErr);\r\n                    this.currentPdfContent = '';\r\n                    notifyError(`PDF extraction failed for ${activeFile.basename}: ${this.pdfExtractionError}`, pdfErr);\r\n                } finally {\r\n                    this._pdfExtractionInProgress = false;\r\n                    this.updateNoteInfo();\r\n                }\r\n\r\n                this.updateNoteInfo();\r\n                await this.loadConversation();\r\n            } catch (_) {\r\n                // ignore\r\n            }\r\n            return;\r\n        }\r\n\r\n        // For other file types, clear state but keep panel open\r\n        this.currentNoteContent = '';\r\n        this.currentPdfContent = '';\r\n        this.pdfExtractionError = null;\r\n        this.updateNoteInfo();\r\n        this.renderChatHistory();\r\n    }\r\n\r\n    updateNoteInfo() {\r\n        // delegate\r\n        this.uiSvc.updateNoteInfo();\r\n    }\r\n\r\n    async renderView() {\r\n        const container = this.contentEl || this.containerEl.children[1];\r\n        container.empty();\r\n        container.addClass('chat-panel-container');\r\n\r\n        const header = container.createEl('div', { cls: 'chat-panel-header' });\r\n        const titleRow = header.createEl('div', { cls: 'chat-title-row' });\r\n        titleRow.createEl('h3', { text: 'Chat with Note', cls: 'chat-panel-title' });\r\n        \r\n        // Discussion management buttons\r\n        const discussionControls = titleRow.createEl('div', { cls: 'discussion-controls' });\r\n        \r\n        const newDiscussionBtn = discussionControls.createEl('button', {\r\n            cls: 'discussion-button new-discussion-button',\r\n            title: 'Start new discussion',\r\n            attr: { 'aria-label': 'Start new discussion' }\r\n        });\r\n        newDiscussionBtn.innerHTML = '\uD83D\uDCAC New';\r\n        newDiscussionBtn.addEventListener('click', () => this.startNewDiscussion());\r\n        \r\n        const discussionHistoryBtn = discussionControls.createEl('button', {\r\n            cls: 'discussion-button history-button',\r\n            title: 'View discussion history for this note',\r\n            attr: { 'aria-label': 'View discussion history for this note' }\r\n        });\r\n        discussionHistoryBtn.innerHTML = '\uD83D\uDCCB History';\r\n        discussionHistoryBtn.addEventListener('click', () => this.toggleDiscussionHistory());\r\n        const globalHistoryBtn = discussionControls.createEl('button', {\r\n            cls: 'discussion-button global-history-button',\r\n            title: 'View global discussion history',\r\n            attr: { 'aria-label': 'View global discussion history' }\r\n        });\r\n        globalHistoryBtn.innerHTML = '\uD83C\uDF10 Global';\r\n        globalHistoryBtn.addEventListener('click', () => this.toggleGlobalHistory());\r\n      \r\n        // Only show New and History buttons in the header (Global/Privacy/Undo removed)\r\n        \r\n        const noteInfo = header.createEl('div', { cls: 'chat-note-info' });\r\n\r\n        // Discussion History Panel (for current note)\r\n        const discussionHistoryPanel = container.createEl('div', { \r\n            cls: 'discussion-history-panel',\r\n            attr: { style: 'display: none;' }\r\n        });\r\n        this.discussionHistoryPanel = discussionHistoryPanel;\r\n        \r\n        // Global History Panel\r\n        const globalHistoryPanel = container.createEl('div', { \r\n            cls: 'global-history-panel',\r\n            attr: { style: 'display: none;' }\r\n        });\r\n        this.globalHistoryPanel = globalHistoryPanel;\r\n\r\n        const chatArea = container.createEl('div', { cls: 'chat-messages-area' });\r\n        this.chatMessagesEl = chatArea;\r\n\r\n        chatArea.addEventListener('scroll', () => {\r\n            const { scrollTop, scrollHeight, clientHeight } = chatArea;\r\n            const isAtBottom = scrollTop + clientHeight >= scrollHeight - 5;\r\n            this.isUserScrolling = !isAtBottom;\r\n        });\r\n\r\n        // Drag & drop support to include other notes in LLM context\r\n        chatArea.addEventListener('dragover', (e) => {\r\n            e.preventDefault();\r\n            e.dataTransfer.dropEffect = 'copy';\r\n        });\r\n        chatArea.addEventListener('drop', async (e) => {\r\n            e.preventDefault();\r\n            try {\r\n                let targetFile = null;\r\n                \r\n                // Try files list (desktop)\r\n                const files = e.dataTransfer.files;\r\n                if (files && files.length > 0) {\r\n                    const f = files[0];\r\n                    const filePath = f.path || f.name;\r\n                    if (filePath && filePath.endsWith('.md')) {\r\n                        targetFile = this.app.vault.getAbstractFileByPath(filePath);\r\n                    }\r\n                }\r\n\r\n                // Try plain text payload (internal Obsidian drag)\r\n                if (!targetFile) {\r\n                    const txt = e.dataTransfer.getData('text/plain');\r\n                    if (txt) {\r\n                        const candidate = txt.trim();\r\n                        \r\n                        if (candidate.startsWith('obsidian://')) {\r\n                            // Extract file path from obsidian URI\r\n                            try {\r\n                                const url = new URL(candidate);\r\n                                const fileParam = url.searchParams.get('file');\r\n                                if (fileParam) {\r\n                                    const decoded = decodeURIComponent(fileParam).replace(/^\\//, '');\r\n                                    // try direct path\r\n                                    targetFile = this.app.vault.getAbstractFileByPath(decoded);\r\n                                    // try with .md suffix\r\n                                    if (!targetFile) targetFile = this.app.vault.getAbstractFileByPath(decoded.endsWith('.md') ? decoded : decoded + '.md');\r\n                                    // try basename search\r\n                                    if (!targetFile) {\r\n                                        const base = decoded.replace(/\\\\/g, '/').split('/').pop().replace(/\\.md$/i, '');\r\n                                        const files = this.app.vault.getFiles();\r\n                                        targetFile = files.find(f => f.basename.toLowerCase() === base.toLowerCase());\r\n                                    }\r\n                                }\r\n                            } catch (_) {\r\n                                // Fall back to name search\r\n                                const files = this.app.vault.getFiles();\r\n                                targetFile = files.find(f => \r\n                                    f.basename.toLowerCase() === candidate.toLowerCase() ||\r\n                                    f.path.toLowerCase() === candidate.toLowerCase()\r\n                                );\r\n                            }\r\n                        } else if (candidate.endsWith('.md')) {\r\n                            targetFile = this.app.vault.getAbstractFileByPath(candidate);\r\n                        } else {\r\n                            // Try find by name\r\n                            const files = this.app.vault.getFiles();\r\n                            targetFile = files.find(f => \r\n                                f.basename.toLowerCase() === candidate.toLowerCase()\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If we found a target file, prefer adding markdown notes to the LLM context\r\n                if (targetFile && targetFile instanceof TFile) {\r\n                    // Handle markdown notes\r\n                    if (targetFile.extension === 'md') {\r\n                        await this._loadIncludedNoteEntry(targetFile.path, targetFile);\r\n                        await this.saveConversation();\r\n                        this.updateNoteInfo();\r\n                        notify(`Included note \"${targetFile.basename}\" added to LLM context.`);\r\n                    }\r\n                    // Handle PDFs by extracting text and including that content\r\n                    else if (targetFile.extension === 'pdf') {\r\n                        try {\r\n                            this._pdfExtractionInProgress = true;\r\n                            this.updateNoteInfo();\r\n                            const text = await this.plugin.pdfService.extractTextFromPdf(targetFile);\r\n                            // Store as included note entry (so it will be part of the LLM context)\r\n                            this.includedNotes.set(targetFile.path, {\r\n                                name: targetFile.basename + ' (PDF)',\r\n                                content: text || '',\r\n                                includeInContext: true,\r\n                                isPdf: true\r\n                            });\r\n                            await this.saveConversation();\r\n                            this.updateNoteInfo();\r\n                            notify(`Included PDF \"${targetFile.basename}\" added to LLM context.`);\r\n                        } catch (err) {\r\n                            console.warn('Failed to extract PDF on drop', err);\r\n                            notifyError(`Failed to extract PDF: ${targetFile.basename}`, err);\r\n                            // Fall back to opening the file so user can inspect it\r\n                            try { await this.app.workspace.getLeaf().openFile(targetFile); } catch (_) {}\r\n                        } finally {\r\n                            this._pdfExtractionInProgress = false;\r\n                            this.updateNoteInfo();\r\n                        }\r\n                    }\r\n                    // Handle plain text-like files by reading their content and including\r\n                    else if (['txt','csv','json','html','md','markdown'].includes((targetFile.extension || '').toLowerCase())) {\r\n                        try {\r\n                            const content = await this.app.vault.read(targetFile);\r\n                            this.includedNotes.set(targetFile.path, {\r\n                                name: targetFile.basename,\r\n                                content: content || '',\r\n                                includeInContext: true\r\n                            });\r\n                            await this.saveConversation();\r\n                            this.updateNoteInfo();\r\n                            notify(`Included file \"${targetFile.basename}\" added to LLM context.`);\r\n                        } catch (err) {\r\n                            console.warn('Failed to read dropped file', err);\r\n                            notifyError(`Failed to include file: ${targetFile.basename}`, err);\r\n                        }\r\n                    }\r\n                    // Otherwise (binary/unhandled), open the file to preserve previous behavior\r\n                    else {\r\n                        await this.app.workspace.getLeaf().openFile(targetFile);\r\n                    }\r\n                } else {\r\n                    // Fallback: add to included notes if file not found but valid path\r\n                    const txt = e.dataTransfer.getData('text/plain');\r\n                    if (txt && txt.trim()) {\r\n                        await this.addIncludedNoteByName(txt.trim());\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.warn('Drop handling failed', err);\r\n                notifyError('Failed to process dropped item', err);\r\n            }\r\n        });\r\n\r\n        const inputArea = container.createEl('div', { cls: 'chat-input-area' });\r\n        \r\n        const inputContainer = inputArea.createEl('div', { cls: 'chat-input-container' });\r\n        \r\n        this.messageInput = inputContainer.createEl('textarea', {\r\n            cls: 'chat-message-input',\r\n            attr: {\r\n                placeholder: 'Ask questions about the current note and PDF...',\r\n                rows: '3'\r\n            }\r\n        });\r\n        \r\n        // Send button and clear stacked vertically on the right\r\n        const sendControls = inputContainer.createEl('div', { cls: 'chat-send-controls' });\r\n        sendControls.style.display = 'flex';\r\n        sendControls.style.flexDirection = 'column';\r\n        sendControls.style.gap = '8px';\r\n        sendControls.style.alignItems = 'flex-end';\r\n\r\n        const sendButton = sendControls.createEl('button', {\r\n            cls: 'chat-send-button',\r\n            text: 'Send',\r\n            attr: { type: 'button', 'aria-label': 'Send message' }\r\n        });\r\n        sendButton.addEventListener('click', () => this.sendMessage());\r\n        this.messageInput.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Enter') {\r\n                if (e.shiftKey) {\r\n                    return;\r\n                } else if (e.ctrlKey || e.metaKey) {\r\n                    e.preventDefault();\r\n                    this.sendMessage();\r\n                } else {\r\n                    e.preventDefault();\r\n                    this.sendMessage();\r\n                }\r\n            } else if (e.key === 'Escape') {\r\n                e.preventDefault();\r\n                this.messageInput.value = '';\r\n                this.messageInput.style.height = 'auto';\r\n            } else if (e.key === 'ArrowUp' && e.ctrlKey) {\r\n                e.preventDefault();\r\n                this.navigateMessageHistory(-1);\r\n            } else if (e.key === 'ArrowDown' && e.ctrlKey) {\r\n                e.preventDefault();\r\n                this.navigateMessageHistory(1);\r\n            }\r\n        });\r\n\r\n        this.messageInput.addEventListener('input', () => {\r\n            this.autoResizeTextarea();\r\n        });\r\n\r\n        const clearButton = sendControls.createEl('button', {\r\n            cls: 'chat-clear-button',\r\n            text: 'Clear Chat',\r\n            attr: { type: 'button', 'aria-label': 'Clear chat history' }\r\n        });\r\n        clearButton.addEventListener('click', () => this.clearChat());\r\n\r\n        await this._updateCurrentNote();\r\n        this.renderChatHistory();\r\n\r\n        this.addStyles();\r\n    }\r\n\r\n    async sendMessage() {\r\n        let message = this.messageInput.value.trim();\r\n        if (!message) return;\r\n\r\n        if (!this.currentNoteFile) {\r\n            this.addMessageToHistory('system', 'Please open a note or a PDF first.');\r\n            return;\r\n        }\r\n\r\n        // Create new discussion if none exists\r\n        if (!this.currentDiscussionId) {\r\n            this.currentDiscussionId = this.generateDiscussionId();\r\n        }\r\n\r\n        this.userMessageHistory.push(message);\r\n        this.messageHistoryIndex = -1;\r\n\r\n    this.addMessageToHistory('user', message);\r\n        this.messageInput.value = '';\r\n        this.autoResizeTextarea();\r\n\r\n        const thinkingId = this.addMessageToHistory('assistant', '\uD83D\uDCAD Thinking...', true);\r\n\r\n            try {\r\n            // Parse tokens like #{note-name} to include other notes by name\r\n            const includeTokens = [];\r\n            const tokenRegex = /#\\{([^}]+)\\}/g;\r\n            let m;\r\n            while ((m = tokenRegex.exec(message)) !== null) {\r\n                const name = m[1].trim();\r\n                if (name) includeTokens.push(name);\r\n            }\r\n            // Remove tokens from the message (so user intent is preserved)\r\n            if (includeTokens.length > 0) {\r\n                message = message.replace(tokenRegex, '').trim();\r\n                // Try to add each included note by name (async)\r\n                for (const name of includeTokens) {\r\n                    await this.addIncludedNoteByName(name);\r\n                }\r\n            }\r\n            let context = '';\r\n            const isPdf = this.currentNoteFile.extension === 'pdf';\r\n            if (isPdf) {\r\n                context = `Current PDF: ${this.currentNoteFile.basename}\\n\\nPDF Content:\\n${this.currentPdfContent || '(no extracted content)'}`;\r\n            } else {\r\n                context = `Current Note: ${this.currentNoteFile.basename}\\n\\n`;\r\n                if (this.includeNoteInContext) {\r\n                    context += `Note Content:\\n${this.currentNoteContent}`;\r\n                } else {\r\n                    context += `Note content excluded from LLM context (toggle is OFF).`;\r\n                }\r\n\r\n                if (this.includePdfInContext && this.currentPdfContent) {\r\n                    const pdfContentToAdd = this.currentPdfContent.slice(0, 50000);\r\n                    context += `\\n\\n--- Associated PDF Content (included by toggle) ---\\n${pdfContentToAdd}`;\r\n                }\r\n                // Include any additional notes the user added\r\n                if (this.includedNotes && this.includedNotes.size > 0) {\r\n                    for (const [path, entry] of this.includedNotes.entries()) {\r\n                        if (entry && entry.includeInContext) {\r\n                            const noteText = entry.content || '';\r\n                            const snippet = noteText.length > 50000 ? noteText.slice(0, 50000) : noteText;\r\n                            context += `\\n\\n--- Included Note: ${entry.name || path} ---\\n${snippet}`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Privacy / consent check: block sending note/pdf content to remote LLM if the user hasn't opted in\r\n            const willSendContents = (this.includeNoteInContext && this.currentNoteContent && this.currentNoteContent.length > 0)\r\n                || (this.includePdfInContext && this.currentPdfContent && this.currentPdfContent.length > 0)\r\n                || (this.includedNotes && Array.from(this.includedNotes.values()).some(e => e.includeInContext));\r\n            if (willSendContents && this.plugin?.settings && this.plugin.settings.allowSendNotePdfToLLM === false) {\r\n                const msg = 'Sending note or PDF content to external LLM is disabled in plugin settings.';\r\n                this.updateMessageInHistory(thinkingId, msg);\r\n                notify(msg);\r\n                return;\r\n            }\r\n\r\n            // Capture call context so responses arriving after a note switch can be routed\r\n            const callContext = {\r\n                notePath: this.currentNoteFile?.path,\r\n                discussionId: this.currentDiscussionId,\r\n                messageId: thinkingId\r\n            };\r\n\r\n            // Abort previous in-flight call (if any)\r\n            if (this._lastLLMController && typeof this._lastLLMController.abort === 'function') {\r\n                try { this._lastLLMController.abort(); } catch (e) { /* ignore */ }\r\n            }\r\n            this._lastLLMController = (typeof AbortController !== 'undefined') ? new AbortController() : null;\r\n\r\n            const conversationHistory = this.chatHistory\r\n                .filter(msg => msg.role !== 'system')\r\n                .slice(-10)\r\n                .map(msg => `${msg.role}: ${msg.content}`)\r\n                .join('\\n');\r\n\r\n            const systemPrompt = `You are a helpful research assistant. You are chatting with a user about their current note and any associated PDF content. \\n\\nContext:\\n${context}\\n\\nPrevious conversation:\\n${conversationHistory}\\n\\nPlease provide helpful, accurate responses based on the note and PDF content. If the user asks about something not in the provided content, let them know that information isn't available in the current materials.`;\r\n\r\n            // Issue the LLM call (pass abort signal if supported)\r\n            let response;\r\n            try {\r\n                if (this._lastLLMController) {\r\n                    response = await this.plugin.llmService.callLLMWithPrompt(systemPrompt, message, { signal: this._lastLLMController.signal });\r\n                } else {\r\n                    response = await this.plugin.llmService.callLLMWithPrompt(systemPrompt, message);\r\n                }\r\n            } catch (err) {\r\n                if (err && err.name === 'AbortError') {\r\n                    this.updateMessageInHistory(thinkingId, 'LLM request canceled.');\r\n                    notify('LLM request canceled.');\r\n                    return;\r\n                }\r\n                throw err;\r\n            }\r\n\r\n            // If note changed during request, save the assistant response to the original note's conversation\r\n            if (callContext.notePath && callContext.notePath !== this.currentNoteFile?.path) {\r\n                try {\r\n                    this._saveAssistantResponseToPath(callContext.notePath, callContext.discussionId, {\r\n                        id: Date.now() + Math.random(),\r\n                        role: 'assistant',\r\n                        content: response,\r\n                        timestamp: new Date(),\r\n                        isTyping: false\r\n                    });\r\n                    notify('Response completed after you switched notes \u2014 saved to original discussion.');\r\n                } catch (e) {\r\n                    console.error('Failed to save orphaned response', e);\r\n                    notifyError('Response received but failed to save to original note. Check console.', e);\r\n                }\r\n            } else {\r\n                this.updateMessageInHistory(thinkingId, response);\r\n            }\r\n            \r\n        } catch (error) {\r\n            let errorMessage = 'An error occurred while processing your request.';\r\n            const emsg = (error && error.message) ? error.message : String(error || 'Unknown error');\r\n            if (emsg.includes('status 401') || emsg.toLowerCase().includes('unauthorized')) {\r\n                errorMessage = '\u274C Authentication failed. Please check your API key in settings.';\r\n            } else if (emsg.includes('status 403')) {\r\n                errorMessage = '\u274C Access forbidden. Your API key may not have permission for this model.';\r\n            } else if (emsg.includes('status 429') || emsg.toLowerCase().includes('rate limit')) {\r\n                errorMessage = '\u274C Rate limit exceeded. Please wait a moment and try again.';\r\n            } else if (emsg.toLowerCase().includes('timeout')) {\r\n                errorMessage = '\u274C LLM request timed out. Try again or reduce context size.';\r\n            } else {\r\n                errorMessage = `\u274C Error: ${emsg}`;\r\n            }\r\n            notifyError(errorMessage, error);\r\n            this.updateMessageInHistory(thinkingId, errorMessage);\r\n        }\r\n    }\r\n\r\n    addMessageToHistory(role, content, isTyping = false) {\r\n        // Guard against empty or invalid messages\r\n        if (!content || typeof content !== 'string' || content.trim() === '') return null;\r\n        if (!role || !['user', 'assistant', 'system'].includes(role)) role = 'assistant';\r\n\r\n        // Avoid repeating identical system/assistant messages back-to-back (common when loading discussions)\r\n        if ((role === 'system' || role === 'assistant') && this.chatHistory.length > 0) {\r\n            const last = this.chatHistory[this.chatHistory.length - 1];\r\n            if (last && last.role === role && last.content === content) {\r\n                // If last message is identical and not a typing placeholder, skip adding duplicate\r\n                if (!last.isTyping) return last.id;\r\n            }\r\n        }\r\n\r\n        const messageId = Date.now() + Math.random();\r\n        // delegate to state service\r\n        return this.stateSvc.addMessageToHistory(role, content, isTyping);\r\n    }\r\n\r\n    updateMessageInHistory(messageId, newContent) {\r\n        // delegate to state service\r\n        this.stateSvc.updateMessageInHistory(messageId, newContent);\r\n    }\r\n\r\n    deleteMessage(messageId) {\r\n    // delegate to state service\r\n    this.stateSvc.deleteMessage(messageId);\r\n    notify('Message deleted \u2014 click Undo in the header to restore (15s)');\r\n        // show Undo button by re-rendering header (renderView controls will be rebuilt on next open; instead just ensure button exists)\r\n        if (this._lastDeletedTimer) clearTimeout(this._lastDeletedTimer);\r\n        this._lastDeletedTimer = setTimeout(() => { this._lastDeletedMessage = null; this._lastDeletedTimer = null; this.updateNoteInfo(); this.renderChatHistory(); }, 15000);\r\n    }\r\n\r\n    // Discussion Management Methods\r\n    generateDiscussionId() {\r\n        return _genDiscussionId();\r\n    }\r\n\r\n    // Data structure helpers for unified architecture\r\n    _createDiscussion(id, notePath, title = null) {\r\n        const discussion = {\r\n            id,\r\n            title: title || this.generateDiscussionTitle(),\r\n            notePath,\r\n            noteName: notePath ? notePath.split('/').pop().replace('.md', '') : 'Unknown',\r\n            state: 'DRAFT', // DRAFT -> ACTIVE -> SAVED\r\n            startTime: new Date(),\r\n            lastUpdated: new Date(),\r\n            messageCount: this.chatHistory.length,\r\n            history: [...this.chatHistory],\r\n            userMessageHistory: [...this.userMessageHistory],\r\n            includePdfInContext: this.includePdfInContext,\r\n            includeNoteInContext: this.includeNoteInContext,\r\n            includedNotes: this._serializeIncludedNotes()\r\n        };\r\n        return discussion;\r\n    }\r\n\r\n    _serializeIncludedNotes() {\r\n        return Array.from(this.includedNotes.entries()).map(([path, data]) => ({\r\n            path,\r\n            name: data.name || path,\r\n            includeInContext: !!data.includeInContext,\r\n            content: typeof data.content === 'string' ? data.content : ''\r\n        }));\r\n    }\r\n\r\n    _deserializeIncludedNotes(serializedNotes) {\r\n        this.includedNotes.clear();\r\n        if (Array.isArray(serializedNotes)) {\r\n            for (const note of serializedNotes) {\r\n                this.includedNotes.set(note.path, {\r\n                    name: note.name || note.path,\r\n                    content: note.content || '',\r\n                    includeInContext: note.includeInContext !== false\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    _addDiscussionToNote(discussionId, notePath) {\r\n        if (!this.noteDiscussions.has(notePath)) {\r\n            this.noteDiscussions.set(notePath, new Set());\r\n        }\r\n        this.noteDiscussions.get(notePath).add(discussionId);\r\n        \r\n        this.discussionIndex.set(discussionId, {\r\n            notePath,\r\n            lastUpdated: new Date()\r\n        });\r\n    }\r\n\r\n    _removeDiscussionFromNote(discussionId, notePath) {\r\n        if (this.noteDiscussions.has(notePath)) {\r\n            this.noteDiscussions.get(notePath).delete(discussionId);\r\n            if (this.noteDiscussions.get(notePath).size === 0) {\r\n                this.noteDiscussions.delete(notePath);\r\n            }\r\n        }\r\n        this.discussionIndex.delete(discussionId);\r\n    }\r\n\r\n    _validateDiscussion(discussion) {\r\n        return discussion && \r\n               typeof discussion.id === 'string' && \r\n               typeof discussion.notePath === 'string' &&\r\n               Array.isArray(discussion.history);\r\n    }\r\n\r\n    // (private _generateDiscussionTitle removed - use public generateDiscussionTitle instead)\r\n\r\n    // Discussion loading helper\r\n    async _loadDiscussionsForNote(notePath) {\r\n        if (!notePath || !this.plugin?.settings) return;\r\n        \r\n        try {\r\n            // Load discussions from settings if not already loaded\r\n            const settingsDiscussions = this.plugin.settings.discussions;\r\n            \r\n            if (settingsDiscussions && settingsDiscussions[notePath]) {\r\n                const persistedNoteDiscussions = settingsDiscussions[notePath];\r\n\r\n                // Ensure we have a Map for this notePath\r\n                if (!this.discussions.has(notePath)) {\r\n                    this.discussions.set(notePath, new Map());\r\n                }\r\n                const discussionMap = this.discussions.get(notePath);\r\n\r\n                // Load each persisted discussion into the per-note Map\r\n                for (const [discussionId, discussionData] of Object.entries(persistedNoteDiscussions)) {\r\n                    if (!discussionMap.has(discussionId)) {\r\n                        // Ensure discussion has proper structure\r\n                        const normalizedDiscussion = {\r\n                            id: discussionId,\r\n                            title: discussionData.title || 'Untitled Discussion',\r\n                            notePath: discussionData.notePath || notePath,\r\n                            noteName: discussionData.noteName || notePath.split('/').pop(),\r\n                            state: discussionData.state || 'SAVED',\r\n                            startTime: discussionData.startTime ? new Date(discussionData.startTime) : new Date(),\r\n                            lastUpdated: discussionData.lastUpdated ? new Date(discussionData.lastUpdated) : new Date(),\r\n                            messageCount: discussionData.messageCount || (discussionData.history || []).length,\r\n                            history: discussionData.history || [],\r\n                            userMessageHistory: discussionData.userMessageHistory || [],\r\n                            includePdfInContext: discussionData.includePdfInContext !== false,\r\n                            includeNoteInContext: discussionData.includeNoteInContext !== false,\r\n                            includedNotes: discussionData.includedNotes || []\r\n                        };\r\n\r\n                        discussionMap.set(discussionId, normalizedDiscussion);\r\n                        this._addDiscussionToNote(discussionId, notePath);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Load the most recent discussion for this note\r\n            const noteDiscussionIds = this.noteDiscussions.get(notePath);\r\n            if (noteDiscussionIds && noteDiscussionIds.size > 0) {\r\n                const recentDiscussions = Array.from(noteDiscussionIds)\r\n                    .map(id => this.discussions.get(id))\r\n                    .filter(d => d)\r\n                    .sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated));\r\n                \r\n                if (recentDiscussions.length > 0) {\r\n                    // Use the new loadDiscussionNew method for now\r\n                    if (this.loadDiscussionNew) {\r\n                        await this.loadDiscussionNew(recentDiscussions[0].id);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.warn('Failed to load discussions for note:', notePath, error);\r\n        }\r\n    }\r\n\r\n    async startNewDiscussion() {\r\n        if (!this.currentNoteFile) {\r\n            this.addMessageToHistory('system', 'Please open a note or PDF first to start a discussion.');\r\n            return;\r\n        }\r\n\r\n        // Save current discussion if it exists and has content\r\n        if (this.currentDiscussionId && this.chatHistory.length > 0) {\r\n            await this._saveCurrentDiscussion();\r\n        }\r\n\r\n        // Create new discussion\r\n        const newDiscussionId = this.generateDiscussionId();\r\n        this.currentDiscussionId = newDiscussionId;\r\n        \r\n        // Reset chat state\r\n        this.chatHistory = [];\r\n        this.userMessageHistory = [];\r\n        this.messageHistoryIndex = -1;\r\n        \r\n        // Update UI\r\n        this.renderChatHistory();\r\n        this.updateNoteInfo();\r\n        \r\n        // Add system message\r\n        \r\n        // Mark as active\r\n        const discussion = this._createDiscussion(newDiscussionId, this.currentNoteFile.path);\r\n        discussion.state = 'ACTIVE';\r\n        // Ensure per-note map exists and store discussion under the note's map\r\n        if (!this.discussions.has(this.currentNoteFile.path) || !(this.discussions.get(this.currentNoteFile.path) instanceof Map)) {\r\n            this.discussions.set(this.currentNoteFile.path, new Map());\r\n        }\r\n        const noteMap = this.discussions.get(this.currentNoteFile.path);\r\n        noteMap.set(newDiscussionId, discussion);\r\n        this._addDiscussionToNote(newDiscussionId, this.currentNoteFile.path);\r\n    }\r\n\r\n    async _saveCurrentDiscussion() {\r\n        if (!this.currentNoteFile || !this.currentDiscussionId || this.chatHistory.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Prevent concurrent saves\r\n        if (this._saveInProgress) {\r\n            this._pendingSave = true;\r\n            return;\r\n        }\r\n\r\n        this._saveInProgress = true;\r\n        \r\n        try {\r\n            const discussionData = this._createDiscussion(\r\n                this.currentDiscussionId, \r\n                this.currentNoteFile.path\r\n            );\r\n            discussionData.state = 'SAVED';\r\n            discussionData.lastUpdated = new Date();\r\n            \r\n            // Normalize message timestamps\r\n            discussionData.history = this.chatHistory.map(m => ({\r\n                ...m,\r\n                isTyping: false,\r\n                timestamp: m.timestamp instanceof Date \r\n                    ? m.timestamp.toISOString()\r\n                    : new Date(m.timestamp || Date.now()).toISOString()\r\n            })).filter(m => {\r\n                const trimmed = m.content.trim();\r\n                return trimmed.length > 0 && !/^(\uD83D\uDCAD\\s*)?Thinking\\.\\.\\.$/i.test(trimmed);\r\n            });\r\n\r\n            // Save to per-note discussions map (new format)\r\n            if (!this.discussions.has(this.currentNoteFile.path) || !(this.discussions.get(this.currentNoteFile.path) instanceof Map)) {\r\n                this.discussions.set(this.currentNoteFile.path, new Map());\r\n            }\r\n            const noteMap = this.discussions.get(this.currentNoteFile.path);\r\n            // Ensure messageCount matches normalized history\r\n            discussionData.messageCount = (discussionData.history || []).length;\r\n            noteMap.set(this.currentDiscussionId, discussionData);\r\n            this._addDiscussionToNote(this.currentDiscussionId, this.currentNoteFile.path);\r\n\r\n            // Update index\r\n            this.discussionIndex.set(this.currentDiscussionId, {\r\n                notePath: this.currentNoteFile.path,\r\n                lastUpdated: discussionData.lastUpdated\r\n            });\r\n\r\n            // Update global discussion history (summary view)\r\n            try {\r\n                const summary = {\r\n                    id: discussionData.id,\r\n                    title: discussionData.title || 'Untitled Discussion',\r\n                    noteFile: discussionData.notePath || this.currentNoteFile.path,\r\n                    noteName: discussionData.noteName || (this.currentNoteFile ? this.currentNoteFile.basename : 'Unknown'),\r\n                    startTime: discussionData.startTime || new Date(),\r\n                    lastUpdated: discussionData.lastUpdated || new Date(),\r\n                    messageCount: discussionData.messageCount || (discussionData.history || []).length,\r\n                    // keep a light-weight history snippet for global view (optional)\r\n                    history: (discussionData.history || []).slice(-3)\r\n                };\r\n\r\n                // Replace existing entry if present\r\n                const existingIndex = this.globalDiscussionHistory.findIndex(d => d.id === summary.id);\r\n                if (existingIndex !== -1) {\r\n                    this.globalDiscussionHistory[existingIndex] = summary;\r\n                } else {\r\n                    // add to front (most recent first)\r\n                    this.globalDiscussionHistory.unshift(summary);\r\n                }\r\n\r\n                // Trim to max 100 entries\r\n                if (this.globalDiscussionHistory.length > 100) this.globalDiscussionHistory = this.globalDiscussionHistory.slice(0, 100);\r\n            } catch (e) {\r\n                console.warn('Failed to update globalDiscussionHistory', e);\r\n            }\r\n            \r\n        } finally {\r\n            this._saveInProgress = false;\r\n            \r\n            // Handle pending save\r\n            if (this._pendingSave) {\r\n                this._pendingSave = false;\r\n                await this._saveCurrentDiscussion();\r\n            }\r\n        }\r\n    }\r\n\r\n    generateDiscussionTitle() {\r\n        if (this.chatHistory.length === 0) return 'Empty Discussion';\r\n        \r\n        // Find first user message for title\r\n        const firstUserMessage = this.chatHistory.find(m => m.role === 'user');\r\n        if (firstUserMessage) {\r\n            const content = firstUserMessage.content.trim();\r\n            // Take first 50 characters and add ellipsis if longer\r\n            return content.length > 50 ? content.substring(0, 50) + '...' : content;\r\n        }\r\n        \r\n        return `Discussion ${new Date().toLocaleDateString()}`;\r\n    }\r\n\r\n    getDiscussionDisplayName() {\r\n        if (!this.currentDiscussionId) return 'No Discussion';\r\n        return this.currentDiscussionId.split('_')[1] || this.currentDiscussionId;\r\n    }\r\n\r\n    loadDiscussion(discussionId, noteFilePath = null) {\r\n        if (!discussionId) return;\r\n\r\n        // Save current discussion first (best-effort)\r\n        if (this.currentDiscussionId && this.chatHistory.length > 0) {\r\n            try { this._saveCurrentDiscussion(); } catch (e) { /* ignore */ }\r\n        }\r\n\r\n        // Attempt to locate the discussion data. The codebase historically used\r\n        // different shapes: either `this.discussions` is a Map of notePath -> Map(discussionId->data)\r\n        // or a flat map of discussionId -> data. Also there is a discussionIndex that maps\r\n        // discussionId -> { notePath,... } which we can use as a hint.\r\n        let discussionData = null;\r\n\r\n        // 1) If caller provided a noteFilePath, try that first\r\n        if (noteFilePath) {\r\n            const noteMap = this.discussions.get(noteFilePath);\r\n            if (noteMap && typeof noteMap.get === 'function') {\r\n                discussionData = noteMap.get(discussionId);\r\n            } else if (noteMap && noteMap[discussionId]) {\r\n                discussionData = noteMap[discussionId];\r\n            }\r\n        }\r\n\r\n        // 2) Try discussionIndex to find the notePath\r\n        if (!discussionData && this.discussionIndex && typeof this.discussionIndex.get === 'function') {\r\n            const idx = this.discussionIndex.get(discussionId);\r\n            if (idx && idx.notePath) {\r\n                const noteMap = this.discussions.get(idx.notePath);\r\n                if (noteMap && typeof noteMap.get === 'function') discussionData = noteMap.get(discussionId);\r\n            }\r\n        }\r\n\r\n        // 3) Scan per-note maps for the id\r\n        if (!discussionData) {\r\n            for (const [key, val] of this.discussions.entries()) {\r\n                if (!val) continue;\r\n                if (typeof val.get === 'function' && val.has(discussionId)) {\r\n                    discussionData = val.get(discussionId);\r\n                    break;\r\n                } else if (val[discussionId]) {\r\n                    discussionData = val[discussionId];\r\n                    break;\r\n                } else if (key === discussionId) {\r\n                    // legacy: discussions may directly map id -> data\r\n                    discussionData = val;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 4) Fallback: direct get\r\n        if (!discussionData && typeof this.discussions.get === 'function') {\r\n            discussionData = this.discussions.get(discussionId);\r\n        }\r\n\r\n\r\n        // Load discussion state\r\n        this.currentDiscussionId = discussionId;\r\n\r\n        // Restore chat history with normalization\r\n        this.chatHistory = (discussionData.history || [])\r\n            .map(m => normalizeMessage(m))\r\n            .filter(m => {\r\n                const trimmed = m.content.trim();\r\n                return trimmed.length > 0 && !/^(\uD83D\uDCAD\\s*)?Thinking\\.\\.\\.$/i.test(trimmed);\r\n            });\r\n\r\n        // Restore other state\r\n        this.userMessageHistory = [...(discussionData.userMessageHistory || [])];\r\n        this.includePdfInContext = discussionData.includePdfInContext !== undefined ? !!discussionData.includePdfInContext : true;\r\n        this.includeNoteInContext = discussionData.includeNoteInContext !== undefined ? !!discussionData.includeNoteInContext : true;\r\n\r\n        // Restore included notes\r\n        this._deserializeIncludedNotes(discussionData.includedNotes);\r\n\r\n        // Update UI\r\n        this.hideHistoryPanels();\r\n        this.renderChatHistory();\r\n        this.updateNoteInfo();\r\n\r\n        // Update discussion state\r\n        discussionData.state = 'ACTIVE';\r\n        discussionData.lastUpdated = new Date();\r\n\r\n        // Notify user\r\n        notify(`Loaded discussion: ${discussionData.title}`);\r\n        // Re-render the history panels so current selection highlights correctly\r\n        try { this.renderDiscussionHistory(); this.renderGlobalHistory(); } catch (e) {}\r\n    }\r\n\r\n    toggleDiscussionHistory() {\r\n        this.showingDiscussionHistory = !this.showingDiscussionHistory;\r\n        this.showingGlobalHistory = false; // Hide global when showing note history\r\n        this.renderDiscussionHistory();\r\n    }\r\n\r\n    toggleGlobalHistory() {\r\n        this.showingGlobalHistory = !this.showingGlobalHistory;\r\n        this.showingDiscussionHistory = false; // Hide note history when showing global\r\n        this.renderGlobalHistory();\r\n    }\r\n\r\n    hideHistoryPanels() {\r\n        this.showingDiscussionHistory = false;\r\n        this.showingGlobalHistory = false;\r\n        if (this.discussionHistoryPanel) {\r\n            this.discussionHistoryPanel.style.display = 'none';\r\n        }\r\n        if (this.globalHistoryPanel) {\r\n            this.globalHistoryPanel.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    async saveConversation() {\r\n        return this.persistSvc.saveConversation();\r\n    }\r\n\r\n    // Save an assistant response for a specific note path/discussion (used when responses return after the user switched notes)\r\n    _saveAssistantResponseToPath(notePath, discussionId, messageObj) {\r\n        return this.persistSvc.saveAssistantResponseToPath(notePath, discussionId, messageObj);\r\n    }\r\n\r\n    async loadConversation() {\r\n        return this.persistSvc.loadConversation();\r\n    }\r\n\r\n    // Try to add an included note by a vault path. Accepts absolute or vault-relative paths.\r\n    async addIncludedNoteByPath(path) {\r\n        if (!path) return;\r\n        // Normalize: remove file:// prefix if present\r\n        let candidate = path.replace(/^file:\\/\\//, '').trim();\r\n        candidate = decodeURIComponent(candidate);\r\n        // If it's just a basename, try to search for it\r\n        let file = this.app.vault.getAbstractFileByPath(candidate);\r\n        if (!file && !candidate.endsWith('.md')) {\r\n            file = this.app.vault.getAbstractFileByPath(candidate + '.md');\r\n        }\r\n        if (!file && candidate.startsWith('/')) {\r\n            // remove leading slash\r\n            file = this.app.vault.getAbstractFileByPath(candidate.slice(1));\r\n            if (!file && !candidate.endsWith('.md')) {\r\n                file = this.app.vault.getAbstractFileByPath(candidate.slice(1) + '.md');\r\n            }\r\n        }\r\n        if (!file) {\r\n            // Try to find by name\r\n            return this.addIncludedNoteByName(candidate.replace(/\\\\/g, '/').split('/').pop().replace(/\\.md$/i, ''));\r\n        }\r\n        if (!(file instanceof TFile) || file.extension !== 'md') return;\r\n        await this._loadIncludedNoteEntry(file.path, file);\r\n        await this.saveConversation();\r\n        this.updateNoteInfo();\r\n    }\r\n\r\n    // Try to find a note by display name/title and include it\r\n    async addIncludedNoteByName(name) {\r\n        if (!name) return;\r\n        // If the user pasted/dropped an obsidian://open URI, try to extract the file param\r\n        try {\r\n            if (typeof name === 'string' && name.startsWith('obsidian://')) {\r\n                const url = new URL(name);\r\n                const fileParam = url.searchParams.get('file');\r\n                if (fileParam) {\r\n                    // fileParam is URL-encoded; convert to vault-relative path\r\n                    const decoded = decodeURIComponent(fileParam);\r\n                    // Some URIs use / separators, ensure we normalize\r\n                    const candidatePath = decoded.replace(/^\\//, '');\r\n                    return await this.addIncludedNoteByPath(candidatePath);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // ignore parse errors and fall back to name matching\r\n        }\r\n        // First try exact filename match\r\n        const vaultFiles = this.app.vault.getFiles();\r\n        const lower = name.toLowerCase();\r\n        let match = vaultFiles.find(f => f.basename.toLowerCase() === lower || f.path.toLowerCase() === lower || f.name.toLowerCase() === lower);\r\n        if (!match) {\r\n            // Try contains\r\n            match = vaultFiles.find(f => f.basename.toLowerCase().includes(lower) || f.path.toLowerCase().includes(lower));\r\n        }\r\n        if (!match) {\r\n            // For obsidian:// URIs, prefer showing the decoded file param for clarity\r\n            let label = name;\r\n            try {\r\n                if (name.startsWith('obsidian://')) {\r\n                    const url = new URL(name);\r\n                    const fileParam = url.searchParams.get('file');\r\n                    if (fileParam) label = decodeURIComponent(fileParam);\r\n                }\r\n            } catch (_) {}\r\n            this.addMessageToHistory('system', `No note found matching \"${label}\"`);\r\n            return;\r\n        }\r\n        await this._loadIncludedNoteEntry(match.path, match);\r\n        await this.saveConversation();\r\n        this.updateNoteInfo();\r\n    }\r\n\r\n    // Load a file's content and add to includedNotes map\r\n    async _loadIncludedNoteEntry(path, file) {\r\n        return this.stateSvc.loadIncludedNoteEntry(path, file);\r\n    }\r\n\r\n    renderChatHistory() {\r\n        if (!this.chatMessagesEl) return;\r\n\r\n        // delegate to UI helper\r\n        this.uiSvc.renderChatHistory();\r\n    }\r\n\r\n    renderDiscussionHistory() {\r\n        if (!this.discussionHistoryPanel) return;\r\n        this.uiSvc.renderDiscussionHistory();\r\n    }\r\n\r\n    renderGlobalHistory() {\r\n        if (!this.globalHistoryPanel) return;\r\n        this.uiSvc.renderGlobalHistory();\r\n    }\r\n\r\n    deleteDiscussion(discussionId, noteFilePath = null) {\r\n        const targetPath = noteFilePath || this.currentNoteFile?.path;\r\n        if (!targetPath) return;\r\n        // Always confirm destructive action using ConfirmModal\r\n        try {\r\n            const noteDiscussions = this.discussions.get(targetPath);\r\n            const title = noteDiscussions && noteDiscussions.has(discussionId) ? (noteDiscussions.get(discussionId).title || 'Untitled') : 'Discussion';\r\n            const modal = new ConfirmModal(this.app, `Are you sure you want to delete discussion \"${title}\"? This cannot be undone.`, () => {\r\n                try {\r\n                    // Remove from note discussions\r\n                    const noteDiscussions = this.discussions.get(targetPath);\r\n                    if (noteDiscussions) {\r\n                        noteDiscussions.delete(discussionId);\r\n                        if (noteDiscussions.size === 0) {\r\n                            this.discussions.delete(targetPath);\r\n                        }\r\n                    }\r\n\r\n                    // Remove from global history\r\n                    this.globalDiscussionHistory = this.globalDiscussionHistory.filter(d => d.id !== discussionId);\r\n\r\n                    // If this was the current discussion, clear it\r\n                    if (this.currentDiscussionId === discussionId) {\r\n                        this.currentDiscussionId = null;\r\n                        this.chatHistory = [];\r\n                        this.userMessageHistory = [];\r\n                        this.messageHistoryIndex = -1;\r\n                        this.renderChatHistory();\r\n                    }\r\n\r\n                    // Re-render history panels\r\n                    this.renderDiscussionHistory();\r\n                    this.renderGlobalHistory();\r\n                    this.saveConversation();\r\n\r\n                    this.addMessageToHistory('system', 'Discussion deleted.');\r\n                    } catch (e) {\r\n                        console.error('Error deleting discussion:', e);\r\n                        notifyError('Failed to delete discussion. See console for details.', e);\r\n                    }\r\n                });\r\n                modal.open();\r\n            } catch (e) {\r\n                // if modal can't open for some reason, fall back to non-confirmed deletion\r\n                console.error('Confirm modal failed', e);\r\n            }\r\n    }\r\n\r\n    // normalizeMessage is provided by chat-utils.js\r\n\r\n    async clearChat() {\r\n        // Save current discussion before clearing if it has content\r\n        if (this.currentDiscussionId && this.chatHistory.length > 0) {\r\n            await this._saveCurrentDiscussion();\r\n        }\r\n\r\n        this.chatHistory = [];\r\n        this.userMessageHistory = [];\r\n        this.messageHistoryIndex = -1;\r\n        this.currentDiscussionId = null; // Clear current discussion\r\n        this.renderChatHistory();\r\n        await this.saveConversation(); // Save the cleared state\r\n    }\r\n\r\n    navigateMessageHistory(direction) {\r\n        if (this.userMessageHistory.length === 0) return;\r\n\r\n        this.messageHistoryIndex += direction;\r\n        \r\n        // Clamp the index\r\n        if (this.messageHistoryIndex < -1) {\r\n            this.messageHistoryIndex = -1;\r\n        } else if (this.messageHistoryIndex >= this.userMessageHistory.length) {\r\n            this.messageHistoryIndex = this.userMessageHistory.length - 1;\r\n        }\r\n\r\n        // Set the message input\r\n        if (this.messageHistoryIndex === -1) {\r\n            this.messageInput.value = '';\r\n        } else {\r\n            this.messageInput.value = this.userMessageHistory[this.userMessageHistory.length - 1 - this.messageHistoryIndex];\r\n        }\r\n        \r\n        this.autoResizeTextarea();\r\n    }\r\n\r\n    autoResizeTextarea() {\r\n        // Use createAutoResizer from helpers to perform resizing\r\n        if (!this._autoResizer && this.messageInput) {\r\n            try {\r\n                const creator = require('./chat-helpers').createAutoResizer;\r\n                this._autoResizer = creator(this.messageInput, 200);\r\n            } catch (e) {\r\n                // Fallback to simple inline behavior\r\n                const textarea = this.messageInput;\r\n                if (!textarea) return;\r\n                textarea.style.height = 'auto';\r\n                const newHeight = Math.min(textarea.scrollHeight, 200);\r\n                textarea.style.height = newHeight + 'px';\r\n                return;\r\n            }\r\n        }\r\n        if (this._autoResizer) this._autoResizer();\r\n    }\r\n\r\n    async testApiConnection() {\r\n        const testId = this.addMessageToHistory('system', 'Testing API connection...');\r\n        \r\n        try {\r\n            await this.plugin.llmService.testApi();\r\n            this.updateMessageInHistory(testId, '\u2705 API connection successful! Your API key and endpoint are working correctly.');\r\n        } catch (error) {\r\n            console.error('API test error:', error);\r\n            let errorMessage = '\u274C API test failed: ';\r\n            \r\n            if (error.message.includes('status 401')) {\r\n                errorMessage += 'Authentication failed. Your API key is invalid or expired.\\n\\nSteps to fix:\\n1. Check your OpenRouter dashboard\\n2. Verify your API key is active\\n3. Ensure your account has credits';\r\n            } else if (error.message.includes('status 403')) {\r\n                errorMessage += 'Access forbidden. Your API key may not have permission for the selected model.';\r\n            } else {\r\n                errorMessage += error.message;\r\n            }\r\n            \r\n            this.updateMessageInHistory(testId, errorMessage);\r\n        }\r\n    }\r\n\r\n    toggleSearch() {\r\n        // Simple search implementation\r\n        const searchTerm = prompt('Search conversation:');\r\n        if (!searchTerm) return;\r\n\r\n        const matches = this.chatHistory.filter(msg => \r\n            msg.content.toLowerCase().includes(searchTerm.toLowerCase())\r\n        );\r\n\r\n        if (matches.length === 0) {\r\n            this.addMessageToHistory('system', `No messages found containing \"${searchTerm}\"`);\r\n            return;\r\n        }\r\n\r\n        let resultText = `Found ${matches.length} message(s) containing \"${searchTerm}\":\\n\\n`;\r\n        matches.forEach((msg, index) => {\r\n            const time = msg.timestamp.toLocaleTimeString();\r\n            const preview = msg.content.length > 100 ? \r\n                msg.content.substring(0, 100) + '...' : \r\n                msg.content;\r\n            resultText += `${index + 1}. [${time}] ${msg.role}: ${preview}\\n\\n`;\r\n        });\r\n\r\n        this.addMessageToHistory('system', resultText);\r\n    }\r\n\r\n    async exportConversation() {\r\n        if (this.chatHistory.length === 0) {\r\n            this.addMessageToHistory('system', 'No conversation to export.');\r\n            return;\r\n        }\r\n\r\n        const exportData = {\r\n            paper: this.currentNoteFile?.basename || 'Unknown',\r\n            exportDate: new Date().toISOString(),\r\n            messageCount: this.chatHistory.length,\r\n            conversation: this.chatHistory.map(msg => ({\r\n                role: msg.role,\r\n                content: msg.content,\r\n                timestamp: msg.timestamp.toISOString()\r\n            }))\r\n        };\r\n\r\n        const exportText = `# Chat Export: ${exportData.paper}\r\nExported: ${new Date().toLocaleString()}\r\nMessages: ${exportData.messageCount}\r\n\r\n---\r\n\r\n${exportData.conversation.map(msg => \r\n`**${msg.role.charAt(0).toUpperCase() + msg.role.slice(1)}** (${new Date(msg.timestamp).toLocaleString()}):\r\n${msg.content}\r\n\r\n---`).join('\\n')}`;\r\n\r\n        try {\r\n            await navigator.clipboard.writeText(exportText);\r\n            this.addMessageToHistory('system', '\u2705 Conversation exported to clipboard!');\r\n        } catch (error) {\r\n            console.error('Export failed:', error);\r\n            this.addMessageToHistory('system', '\u274C Failed to export conversation. Check console for details.');\r\n        }\r\n    }\r\n\r\n    addStyles() {\r\n        // delegate to UI helper\r\n        this.uiSvc.addStyles();\r\n    }\r\n\r\n    async onClose() {\r\n        // Clean up event listeners\r\n        this.chatHistory = [];\r\n    }\r\n}\r\n\r\nmodule.exports = { ChatPanelView, CHAT_PANEL_VIEW_TYPE };", "const { Modal, Notice } = require('obsidian');\r\n\r\nclass PaperModal extends Modal {\r\n    constructor(app, plugin, onSubmit) {\r\n        super(app);\r\n        this.plugin = plugin;\r\n        this.onSubmit = onSubmit;\r\n    }\r\n\r\n    async onOpen() {\r\n        const { contentEl } = this;\r\n        \r\n        this.createInstructions(contentEl);\r\n        const input = this.createUrlInput(contentEl);\r\n        const { sectorSelect, newSectorInput } = await this.createSectorSelection(contentEl);\r\n        const { button, spinner } = this.createSubmitButton(contentEl);\r\n        \r\n        this.setupSubmitHandler(button, spinner, input, sectorSelect, newSectorInput);\r\n    }\r\n\r\n    createInstructions(contentEl) {\r\n        contentEl.createEl('div', { \r\n            text: 'Enter the arXiv URL or a direct PDF link of the research paper:' \r\n        });\r\n    }\r\n\r\n    createUrlInput(contentEl) {\r\n        const input = contentEl.createEl('input', { \r\n            type: 'text', \r\n            placeholder: 'https://arxiv.org/abs/...  OR  https://domain.com/paper.pdf' \r\n        });\r\n        input.style.width = '100%';\r\n        input.style.marginTop = '10px';\r\n        return input;\r\n    }\r\n\r\n    async createSectorSelection(contentEl) {\r\n        contentEl.createEl('div', { text: 'Select research sector:' });\r\n        \r\n        const sectorSelect = contentEl.createEl('select');\r\n        sectorSelect.style.width = '100%';\r\n        sectorSelect.style.marginTop = '6px';\r\n\r\n        const sectors = await this.plugin.paperService.getAvailableSectors();\r\n        for (const s of sectors) {\r\n            sectorSelect.createEl('option', { text: s, value: s });\r\n        }\r\n        sectorSelect.value = this.plugin.settings.defaultSector || 'Other';\r\n\r\n        const newSectorInput = contentEl.createEl('input', { \r\n            type: 'text', \r\n            placeholder: 'Or type a new sector name' \r\n        });\r\n        newSectorInput.style.width = '100%';\r\n        newSectorInput.style.marginTop = '6px';\r\n\r\n        return { sectorSelect, newSectorInput };\r\n    }\r\n\r\n    createSubmitButton(contentEl) {\r\n        const buttonContainer = contentEl.createEl('div', { cls: 'button-container' });\r\n        buttonContainer.style.display = 'flex';\r\n        buttonContainer.style.justifyContent = 'center';\r\n        \r\n        const button = buttonContainer.createEl('button', { text: 'Add Paper' });\r\n        button.style.marginTop = '20px';\r\n\r\n        this.addSpinnerStyles();\r\n        \r\n        const spinner = buttonContainer.createEl('div', { cls: 'ra-spinner' });\r\n        spinner.style.display = 'none';\r\n        spinner.style.border = '4px solid rgba(0,0,0,0.1)';\r\n        spinner.style.borderTop = '4px solid var(--interactive-accent)';\r\n        spinner.style.borderRadius = '50%';\r\n        spinner.style.width = '18px';\r\n        spinner.style.height = '18px';\r\n        spinner.style.marginLeft = '8px';\r\n        spinner.style.animation = 'ra-spin 1s linear infinite';\r\n\r\n        return { button, spinner };\r\n    }\r\n\r\n    addSpinnerStyles() {\r\n        if (!document.getElementById('ra-spinner-style')) {\r\n            const style = document.createElement('style');\r\n            style.id = 'ra-spinner-style';\r\n            style.textContent = `@keyframes ra-spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }`;\r\n            document.head.appendChild(style);\r\n        }\r\n    }\r\n\r\n    setupSubmitHandler(button, spinner, input, sectorSelect, newSectorInput) {\r\n        button.addEventListener('click', async () => {\r\n            const url = input.value.trim();\r\n            if (!url) return;\r\n            \r\n            let sector = sectorSelect.value;\r\n            const newSector = newSectorInput.value.trim();\r\n            \r\n            if (newSector) {\r\n                sector = newSector;\r\n                if (!this.plugin.settings.sectors.includes(newSector)) {\r\n                    this.plugin.settings.sectors.push(newSector);\r\n                    await this.plugin.saveSettings();\r\n                }\r\n            }\r\n            \r\n            await this.handleSubmission(button, spinner, input, sectorSelect, newSectorInput, url, sector);\r\n        });\r\n    }\r\n\r\n    async handleSubmission(button, spinner, input, sectorSelect, newSectorInput, url, sector) {\r\n        const originalBtnText = button.textContent;\r\n        \r\n        try {\r\n            this.setLoadingState(true, button, spinner, input, sectorSelect, newSectorInput);\r\n            await this.onSubmit(url, sector);\r\n            this.close();\r\n        } catch (err) {\r\n            new Notice('Error adding paper: ' + (err && err.message ? err.message : String(err)));\r\n        } finally {\r\n            this.setLoadingState(false, button, spinner, input, sectorSelect, newSectorInput, originalBtnText);\r\n        }\r\n    }\r\n\r\n    setLoadingState(loading, button, spinner, input, sectorSelect, newSectorInput, originalText = 'Add Paper') {\r\n        button.disabled = loading;\r\n        input.disabled = loading;\r\n        sectorSelect.disabled = loading;\r\n        newSectorInput.disabled = loading;\r\n        spinner.style.display = loading ? 'inline-block' : 'none';\r\n        button.textContent = loading ? 'Adding...' : originalText;\r\n    }\r\n\r\n    onClose() {\r\n        this.contentEl.empty();\r\n    }\r\n}\r\n\r\nmodule.exports = PaperModal;", "const { PluginSettingTab, Setting } = require('obsidian');\r\n\r\nclass RASettingTab extends PluginSettingTab {\r\n    constructor(app, plugin) {\r\n        super(app, plugin);\r\n        this.plugin = plugin;\r\n    }\r\n\r\n    async display() {\r\n        const { containerEl } = this;\r\n        containerEl.empty();\r\n        containerEl.createEl('h2', { text: 'Research Assistant Settings' });\r\n\r\n        this.createFolderSettings(containerEl);\r\n        this.createApiSettings(containerEl);\r\n        await this.createSectorSettings(containerEl);\r\n    }\r\n\r\n    createFolderSettings(containerEl) {\r\n        new Setting(containerEl)\r\n            .setName('PDF Download Folder')\r\n            .setDesc('The folder to save papers and notes.')\r\n            .addText(text => text\r\n                .setPlaceholder('e.g., _research-papers')\r\n                .setValue(this.plugin.settings.pdfDownloadFolder)\r\n                .onChange(async (value) => {\r\n                    this.plugin.settings.pdfDownloadFolder = value || '_research-papers';\r\n                    await this.plugin.saveSettings();\r\n                    await this.plugin.rebuildAndRefresh();\r\n                }));\r\n        \r\n        new Setting(containerEl)\r\n            .setName('Hide folder from Files')\r\n            .setDesc('Prefix the folder name with a dot (e.g., \".research-papers\") to hide it. This will move the existing folder and its contents.')\r\n            .addToggle(toggle => toggle\r\n                .setValue(this.plugin.settings.hideFolderFromFiles)\r\n                .onChange(async (value) => {\r\n                    await this.plugin.fileService.toggleFolderVisibility(\r\n                        value, \r\n                        () => this.plugin.saveSettings(),\r\n                        () => this.plugin.rebuildAndRefresh()\r\n                    );\r\n                }));\r\n    }\r\n\r\n    createApiSettings(containerEl) {\r\n        containerEl.createEl('h3', { text: 'Summarization API Settings' });\r\n\r\n        new Setting(containerEl)\r\n            .setName('API Endpoint URL')\r\n            .addText(text => text\r\n                .setPlaceholder('https://api.openai.com/v1/chat/completions')\r\n                .setValue(this.plugin.settings.summaryApiEndpoint)\r\n                .onChange(async (value) => {\r\n                    this.plugin.settings.summaryApiEndpoint = value;\r\n                    await this.plugin.saveSettings();\r\n                }));\r\n                \r\n        new Setting(containerEl)\r\n            .setName('Model Name')\r\n            .addText(text => text\r\n                .setPlaceholder('gpt-4-turbo')\r\n                .setValue(this.plugin.settings.summaryApiModel)\r\n                .onChange(async (value) => {\r\n                    this.plugin.settings.summaryApiModel = value;\r\n                    await this.plugin.saveSettings();\r\n                }));\r\n                \r\n        new Setting(containerEl)\r\n            .setName('API Key')\r\n            .addText(text => text\r\n                .setPlaceholder('sk-xxxxxxxxxxxx')\r\n                .setValue(this.plugin.settings.summaryApiKey)\r\n                .onChange(async (value) => {\r\n                    this.plugin.settings.summaryApiKey = value;\r\n                    await this.plugin.saveSettings();\r\n                }));\r\n    }\r\n\r\n    async createSectorSettings(containerEl) {\r\n        containerEl.createEl('h3', { text: 'Research Sectors' });\r\n        \r\n        const availableSectors = await this.plugin.paperService.getAvailableSectors();\r\n\r\n        if (!availableSectors.includes(this.plugin.settings.defaultSector)) {\r\n            const fallback = availableSectors.includes('Other') ? 'Other' : (availableSectors[0] || 'Other');\r\n            this.plugin.settings.defaultSector = fallback;\r\n            await this.plugin.saveSettings();\r\n        }\r\n\r\n        new Setting(containerEl)\r\n            .setName('Default Sector')\r\n            .setDesc('Sector selected by default when adding new papers.')\r\n            .addDropdown(drop => {\r\n                drop.addOptions(Object.fromEntries(availableSectors.map(s => [s, s])));\r\n                try { \r\n                    drop.setValue(this.plugin.settings.defaultSector); \r\n                } catch (e) { \r\n                    drop.setValue(availableSectors[0] || 'Other'); \r\n                }\r\n                drop.onChange(async (value) => {\r\n                    this.plugin.settings.defaultSector = value;\r\n                    await this.plugin.saveSettings();\r\n                });\r\n            });\r\n\r\n        this.createSectorManagement(containerEl, availableSectors);\r\n    }\r\n\r\n    createSectorManagement(containerEl, availableSectors) {\r\n        new Setting(containerEl)\r\n            .setName('Manage Sectors')\r\n            .setDesc('Add or remove sectors. Folders found on disk are automatically included.');\r\n\r\n        const sectorsWrap = containerEl.createEl('div', { cls: 'sectors-wrap' });\r\n        \r\n        availableSectors.forEach(sector => {\r\n            const isManaged = this.plugin.settings.sectors.includes(sector);\r\n            const isDiscovered = !isManaged;\r\n\r\n            const setting = new Setting(sectorsWrap).setName(sector);\r\n            \r\n            if (isDiscovered) {\r\n                setting.setDesc(\"Discovered from folder\");\r\n            }\r\n\r\n            if (isManaged && sector !== 'Other') {\r\n                setting.addButton(button => {\r\n                    button.setButtonText('Remove').onClick(async () => {\r\n                        this.plugin.settings.sectors = this.plugin.settings.sectors.filter(s => s !== sector);\r\n                        if (this.plugin.settings.defaultSector === sector) {\r\n                            this.plugin.settings.defaultSector = 'Other';\r\n                        }\r\n                        await this.plugin.saveSettings();\r\n                        this.display();\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        this.createNewSectorInput(containerEl);\r\n    }\r\n\r\n    createNewSectorInput(containerEl) {\r\n        new Setting(containerEl)\r\n            .setName('Add new sector')\r\n            .addText(text => {\r\n                text.setPlaceholder('New sector name');\r\n                text.inputEl.addEventListener('keydown', async (e) => {\r\n                    if (e.key === 'Enter') {\r\n                        e.preventDefault();\r\n                        const value = text.getValue().trim();\r\n                        if (value && !this.plugin.settings.sectors.includes(value)) {\r\n                            this.plugin.settings.sectors.push(value);\r\n                            await this.plugin.fileService.ensureFolderExists(`${this.plugin.settings.pdfDownloadFolder}/${value}`);\r\n                            await this.plugin.saveSettings();\r\n                            text.setValue('');\r\n                            this.display();\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nmodule.exports = RASettingTab;", "const { Plugin, Notice, TFile } = require('obsidian');\r\nconst { DEFAULT_SETTINGS } = require('./config/constants');\r\nconst LLMService = require('./services/llm-service');\r\nconst MetadataService = require('./services/metadata-service');\r\nconst FileService = require('./services/file-service');\r\nconst PaperService = require('./services/paper-service');\r\nconst PdfService = require('./services/pdf-service');\r\nconst { PaperExplorerView, PAPER_EXPLORER_VIEW_TYPE } = require('./ui/paper-explorer-view');\r\nconst { ChatPanelView, CHAT_PANEL_VIEW_TYPE } = require('./ui/chat-panel-view');\r\nconst PaperModal = require('./ui/paper-modal');\r\nconst RASettingTab = require('./ui/settings-tab');\r\nconst { generatePdfFileName } = require('./utils/formatters');\r\n\r\nclass ResearchAssistantPlugin extends Plugin {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._activeSector = 'All';\r\n    }\r\n\r\n    async onload() {\r\n        await this.loadSettings();\r\n        this.initializeServices();\r\n        this.setupEventHandlers();\r\n        this.registerViews();\r\n        this.registerCommands();\r\n        this.addSettingTab(new RASettingTab(this.app, this));\r\n    }\r\n\r\n    initializeServices() {\r\n        this.llmService = new LLMService(this.settings);\r\n        this.metadataService = new MetadataService();\r\n        this.fileService = new FileService(this.app, this.settings);\r\n        this.pdfService = new PdfService(this.app, this.settings);\r\n        this.paperService = new PaperService(this.app, this.settings, this.fileService, this.pdfService);\r\n    }\r\n\r\n    setupEventHandlers() {\r\n        this.app.workspace.onLayoutReady(async () => {\r\n            await this.paperService.buildPaperIndex();\r\n            this.registerEvent(this.app.vault.on('create', this.handleFileCreate.bind(this)));\r\n            this.registerEvent(this.app.vault.on('delete', this.handleFileDelete.bind(this)));\r\n            this.registerEvent(this.app.vault.on('rename', this.handleFileRename.bind(this)));\r\n            this.registerEvent(this.app.metadataCache.on('changed', this.handleMetadataChange.bind(this)));\r\n        });\r\n    }\r\n\r\n    registerViews() {\r\n        this.registerView(\r\n            PAPER_EXPLORER_VIEW_TYPE,\r\n            (leaf) => new PaperExplorerView(leaf, this.settings, this)\r\n        );\r\n\r\n        this.registerView(\r\n            CHAT_PANEL_VIEW_TYPE,\r\n            (leaf) => new ChatPanelView(leaf, this.settings, this)\r\n        );\r\n\r\n        this.addRibbonIcon('library', 'Open Paper Explorer', () => {\r\n            this.openMasterIndexInMainView().then(() => this.activateView());\r\n        });\r\n\r\n        this.addRibbonIcon('message-circle', 'Open Note Chat', () => {\r\n            this.activateChatView();\r\n        });\r\n    }\r\n\r\n    registerCommands() {\r\n        this.addCommand({\r\n            id: 'add-research-paper',\r\n            name: 'Add Research Paper',\r\n            callback: () => this.openAddPaperModal()\r\n        });\r\n        \r\n        this.addCommand({\r\n            id: 'open-paper-explorer',\r\n            name: 'Open Paper Explorer',\r\n            callback: () => {\r\n                this.openMasterIndexInMainView().then(() => this.activateView());\r\n            }\r\n        });\r\n\r\n        this.addCommand({\r\n            id: 'generate-resume-all-papers',\r\n            name: 'Generate Resume for All Papers',\r\n            callback: () => this.paperService.generateResumeForPapers(this.llmService)\r\n        });\r\n\r\n        this.addCommand({\r\n            id: 'generate-tags-all-papers',\r\n            name: 'Generate Tags for All Papers',\r\n            callback: () => this.paperService.generateTagsForPapers(this.llmService)\r\n        });\r\n\r\n        this.addCommand({\r\n            id: 'clean-resume-sections',\r\n            name: 'Clean Resume Sections from All Papers',\r\n            callback: async () => {\r\n                try {\r\n                    await this.paperService.buildPaperIndex();\r\n                    await this.paperService.cleanAllResumes();\r\n                    await this.rebuildAndRefresh();\r\n                } catch (err) {\r\n                    new Notice('Failed to clean resume sections: ' + (err && err.message ? err.message : String(err)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addCommand({\r\n            id: 'test-llm-api',\r\n            name: 'Test LLM API Configuration',\r\n            callback: () => this.testLLMApi()\r\n        });\r\n        \r\n        this.addCommand({\r\n            id: 'rebuild-paper-index',\r\n            name: 'Rebuild Paper Index',\r\n            callback: async () => {\r\n                new Notice('Rebuilding paper index...');\r\n                await this.rebuildAndRefresh();\r\n                new Notice('Paper index rebuilt.');\r\n            }\r\n        });\r\n\r\n        this.addCommand({\r\n            id: 'generate-resume-current-note',\r\n            name: 'Generate Resume for Current Note',\r\n            callback: () => this.generateResumeForCurrentNote()\r\n        });\r\n\r\n        this.addCommand({\r\n            id: 'open-note-chat',\r\n            name: 'Open Note Chat Panel',\r\n            callback: () => this.activateChatView()\r\n        });\r\n    }\r\n\r\n    async handleFileCreate(file) {\r\n        if (file instanceof TFile && this.paperService.isPaperFile(file)) {\r\n            const paperData = await this.paperService.parsePaperFile(file);\r\n            if (paperData) {\r\n                this.paperService.paperIndex.set(file.path, paperData);\r\n                this.paperService.scheduleRebuild(300, () => this.rebuildAndRefresh());\r\n            }\r\n        }\r\n    }\r\n\r\n    async handleFileDelete(file) {\r\n        if (this.paperService.paperIndex.has(file.path)) {\r\n            this.paperService.paperIndex.delete(file.path);\r\n            this.paperService.scheduleRebuild(300, () => this.rebuildAndRefresh());\r\n        }\r\n    }\r\n\r\n    async handleFileRename(file, oldPath) {\r\n        if (this.paperService.paperIndex.has(oldPath)) {\r\n            this.paperService.paperIndex.delete(oldPath);\r\n        }\r\n        if (file instanceof TFile && this.paperService.isPaperFile(file)) {\r\n            const paperData = await this.paperService.parsePaperFile(file);\r\n            if (paperData) {\r\n                this.paperService.paperIndex.set(file.path, paperData);\r\n            }\r\n        }\r\n        this.paperService.scheduleRebuild(300, () => this.rebuildAndRefresh());\r\n    }\r\n\r\n    async handleMetadataChange(file) {\r\n        if (this.paperService.paperIndex.has(file.path)) {\r\n            const paperData = await this.paperService.parsePaperFile(file);\r\n            if (paperData) {\r\n                this.paperService.paperIndex.set(file.path, paperData);\r\n                this.paperService.scheduleRebuild(300, () => this.rebuildAndRefresh());\r\n            }\r\n        }\r\n    }\r\n    async processNewPaper(url, sector) {\r\n        try {\r\n            new Notice('Fetching paper data...');\r\n            const metadata = await this.metadataService.getMetadataFromUrl(url);\r\n            const useSector = sector || this.settings.defaultSector || 'Other';\r\n            const pdfFileName = generatePdfFileName(metadata);\r\n\r\n            const pdfLogicalPath = await this.fileService.downloadPdf(metadata, useSector, pdfFileName);\r\n            await this.fileService.createPaperNote(metadata, useSector, pdfLogicalPath);\r\n\r\n            new Notice(`Successfully added '${metadata.title}'!`);\r\n            this.activateView();\r\n            this.paperService.scheduleRebuild(150, () => this.rebuildAndRefresh());\r\n        } catch (error) {\r\n            new Notice(`Error: ${error.message}`, 10000);\r\n        }\r\n    }\r\n\r\n    async deletePaper(noteFile) {\r\n        const paperData = this.paperService.paperIndex.get(noteFile.path);\r\n        await this.fileService.deletePaper(noteFile, paperData);\r\n        this.paperService.scheduleRebuild(150, () => this.rebuildAndRefresh());\r\n    }\r\n\r\n    async testLLMApi() {\r\n        try {\r\n            new Notice('Testing LLM API configuration...');\r\n            await this.llmService.testApi();\r\n            new Notice('\u2705 LLM API test successful!');\r\n        } catch (error) {\r\n            new Notice(`\u274C LLM API test failed: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    async generateResumeForCurrentNote() {\r\n        try {\r\n            const activeFile = this.app.workspace.getActiveFile();\r\n            if (!activeFile) {\r\n                new Notice('No active file found.');\r\n                return;\r\n            }\r\n\r\n            // If the active file is a PDF, extract text and write resume to a sidecar note in the same folder\r\n            if (activeFile.extension === 'pdf') {\r\n                new Notice('Generating resume for current PDF...');\r\n                let pdfText = '';\r\n                try {\r\n                    pdfText = await this.pdfService.extractTextFromPdf(activeFile);\r\n                } catch (e) {\r\n                    new Notice('\u274C Failed to extract PDF text: ' + (e?.message || String(e)));\r\n                    return;\r\n                }\r\n\r\n                const resume = await this.llmService.getSummary(pdfText);\r\n\r\n                // Find or create a sidecar note with same basename\r\n                const folderPath = activeFile.parent?.path || '';\r\n                const mdPath = `${folderPath}/${activeFile.basename}.md`;\r\n                let noteFile = this.app.vault.getAbstractFileByPath(mdPath);\r\n                if (!(noteFile instanceof TFile)) {\r\n                    await this.app.vault.create(mdPath, `---\\nTitle: \"${activeFile.basename}\"\\n---\\n\\n## Paper PDF\\n![[${activeFile.path}]]\\n`);\r\n                    noteFile = this.app.vault.getAbstractFileByPath(mdPath);\r\n                }\r\n                if (!(noteFile instanceof TFile)) {\r\n                    new Notice('\u274C Could not create or open sidecar note for PDF.');\r\n                    return;\r\n                }\r\n                await this.insertResumeIntoNote(noteFile, resume);\r\n                new Notice(`\u2705 Resume generated for PDF '${activeFile.basename}' and saved to '${noteFile.basename}.md'!`);\r\n                return;\r\n            }\r\n\r\n            // Active Markdown file flow\r\n            if (activeFile.extension !== 'md') {\r\n                new Notice('Active file is not a markdown note or PDF.');\r\n                return;\r\n            }\r\n\r\n            new Notice('Generating resume for current note...');\r\n\r\n            const noteContent = await this.app.vault.read(activeFile);\r\n            let contentToSummarize = noteContent;\r\n\r\n            const paperData = this.paperService.paperIndex.get(activeFile.path);\r\n            // Use pdf_file field with path resolution, not pdf_link\r\n            if (paperData && paperData.frontmatter && paperData.frontmatter.pdf_file) {\r\n                try {\r\n                    let logicalPath = String(paperData.frontmatter.pdf_file);\r\n                    if (!logicalPath.includes('/') && activeFile.parent && activeFile.parent.path) {\r\n                        logicalPath = `${activeFile.parent.path}/${logicalPath}`;\r\n                    }\r\n                    const effectivePath = await this.fileService.resolveLogicalToEffectivePath(logicalPath);\r\n                    const pdfFile = this.app.vault.getAbstractFileByPath(effectivePath);\r\n                    if (pdfFile instanceof TFile && pdfFile.extension === 'pdf') {\r\n                        new Notice('Found associated PDF, extracting text...');\r\n                        const pdfText = await this.pdfService.extractTextFromPdf(pdfFile);\r\n                        contentToSummarize = `Note Content:\\n${noteContent}\\n\\n--- Associated PDF Content ---\\n${pdfText}`;\r\n                    }\r\n                } catch (pdfError) {\r\n                    new Notice('Using note content only (PDF extraction failed)');\r\n                }\r\n            }\r\n\r\n            const resume = await this.llmService.getSummary(contentToSummarize);\r\n\r\n            await this.insertResumeIntoNote(activeFile, resume);\r\n\r\n            new Notice(`\u2705 Resume generated for '${activeFile.basename}'!`);\r\n        } catch (error) {\r\n            new Notice(`\u274C Failed to generate resume: ${error.message}`, 8000);\r\n        }\r\n    }\r\n\r\n    async insertResumeIntoNote(noteFile, resume) {\r\n        const content = await this.app.vault.read(noteFile);\r\n\r\n        // Be flexible: match headings like \"# Resume\", \"## Resume:\", \"### R\u00E9sum\u00E9\", or \"## Summary\"\r\n        const resumeStartRegex = /^#{1,6}\\s+(?:Resume|R\u00E9sum\u00E9|Summary)\\s*:?\\s*$/im;\r\n        // Next section starts at any markdown heading line\r\n        const nextHeadingRegex = /^#{1,6}\\s+/m;\r\n\r\n        const startMatch = content.match(resumeStartRegex);\r\n        if (startMatch) {\r\n            const startOfHeading = startMatch.index;\r\n            const endOfHeadingLine = startMatch.index + startMatch[0].length;\r\n\r\n            const remainingContent = content.slice(endOfHeadingLine);\r\n            const endMatch = remainingContent.match(nextHeadingRegex);\r\n\r\n            const endIndex = endMatch ? (endOfHeadingLine + endMatch.index) : content.length;\r\n\r\n            // Preserve embedded PDFs within the original Resume section\r\n            const sectionBody = content.slice(endOfHeadingLine, endIndex);\r\n            const embedRegex = /!\\[\\[[^\\]]*\\.pdf[^\\]]*\\]\\]/ig;\r\n            const embeds = sectionBody.match(embedRegex) || [];\r\n            const embedsBlock = embeds.length ? embeds.join(\"\\n\") + \"\\n\\n\" : \"\";\r\n\r\n            const replacement = `## Resume\\n\\n${resume}\\n\\n${embedsBlock}`;\r\n\r\n            const newContent = content.slice(0, startOfHeading) + replacement + content.slice(endIndex);\r\n\r\n            await this.app.vault.modify(noteFile, newContent);\r\n        } else {\r\n            // Ensure a blank line before appending when needed\r\n            const needsLeadingNewline = content.length > 0 && !content.endsWith(\"\\n\\n\");\r\n            const prefix = needsLeadingNewline ? (content.endsWith(\"\\n\") ? \"\\n\" : \"\\n\\n\") : \"\";\r\n            const newContent = content + `${prefix}## Resume\\n\\n${resume}\\n`;\r\n            await this.app.vault.modify(noteFile, newContent);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    openAddPaperModal() {\r\n        new PaperModal(this.app, this, async (url, sector) => {\r\n            return await this.processNewPaper(url, sector);\r\n        }).open();\r\n    }\r\n\r\n    async activateView() {\r\n        const { workspace } = this.app;\r\n        let leaf = workspace.getLeavesOfType(PAPER_EXPLORER_VIEW_TYPE)[0];\r\n\r\n        if (!leaf) {\r\n            leaf = workspace.getLeftLeaf(false);\r\n            await leaf.setViewState({\r\n                type: PAPER_EXPLORER_VIEW_TYPE,\r\n                active: true,\r\n            });\r\n        }\r\n        workspace.revealLeaf(leaf);\r\n    }\r\n\r\n    async activateChatView() {\r\n        const { workspace } = this.app;\r\n        let leaf = workspace.getLeavesOfType(CHAT_PANEL_VIEW_TYPE)[0];\r\n\r\n        if (!leaf) {\r\n            leaf = workspace.getRightLeaf(false);\r\n            await leaf.setViewState({\r\n                type: CHAT_PANEL_VIEW_TYPE,\r\n                active: true,\r\n            });\r\n        }\r\n        workspace.revealLeaf(leaf);\r\n    }\r\n\r\n    refreshPaperExplorerView() {\r\n        const leaves = this.app.workspace.getLeavesOfType(PAPER_EXPLORER_VIEW_TYPE);\r\n        leaves.forEach(leaf => {\r\n            if (leaf.view instanceof PaperExplorerView) {\r\n                leaf.view.renderView();\r\n            }\r\n        });\r\n    }\r\n\r\n    async openMasterIndexInMainView() {\r\n        const indexPath = `_papers_index.md`;\r\n        await this.fileService.ensureFolderExists(this.settings.pdfDownloadFolder);\r\n        \r\n        if (!await this.app.vault.adapter.exists(indexPath)) {\r\n            await this.paperService.updateMasterIndex();\r\n        }\r\n        \r\n        const file = this.app.vault.getAbstractFileByPath(indexPath);\r\n        if (file instanceof TFile) {\r\n            const leaf = this.app.workspace.getLeaf(false);\r\n            await leaf.openFile(file);\r\n        }\r\n    }\r\n\r\n    // INDEX MANAGEMENT\r\n\r\n    async rebuildAndRefresh() {\r\n        await this.paperService.buildPaperIndex();\r\n        await this.fileService.cleanEmptySectorFolders();\r\n        await this.paperService.pruneUnusedSectors(() => this.saveSettings());\r\n        await this.refreshAllArtifacts();\r\n    }\r\n\r\n    async refreshAllArtifacts() {\r\n        this.refreshPaperExplorerView();\r\n        await this.paperService.updateMasterIndex();\r\n    }\r\n\r\n    // SETTINGS\r\n\r\n    async loadSettings() {\r\n        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\r\n    }\r\n\r\n    async saveSettings() {\r\n        await this.saveData(this.settings);\r\n        if (this.llmService) {\r\n            this.llmService.settings = this.settings;\r\n        }\r\n        if (this.fileService) {\r\n            this.fileService.settings = this.settings;\r\n        }\r\n        if (this.paperService) {\r\n            this.paperService.settings = this.settings;\r\n        }\r\n    }\r\n\r\n    onunload() {\r\n        if (this.paperService) {\r\n            this.paperService.paperIndex.clear();\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = ResearchAssistantPlugin;"],
  "mappings": "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",
  "names": ["exports", "module", "DEFAULT_SETTINGS", "exports", "module", "LLMService", "exports", "module", "MetadataService", "exports", "module", "generatePdfFileName", "exports", "module", "TFile", "Notice", "generatePdfFileName", "FileService", "exports", "module", "TFile", "Notice", "PaperService", "exports", "module", "Notice", "PdfService", "exports", "module", "TFile", "PAPER_EXPLORER_VIEW_TYPE", "PaperExplorerView", "exports", "module", "exports", "module", "exports", "module", "Notice", "exports", "module", "exports", "module", "TFile", "exports", "module", "noteDiscussions", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "TFile", "CHAT_PANEL_VIEW_TYPE", "ChatPanelView", "files", "noteDiscussions", "exports", "module", "Notice", "PaperModal", "exports", "module", "RASettingTab", "Notice", "resume"]
}
