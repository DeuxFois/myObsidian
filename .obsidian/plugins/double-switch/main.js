/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var r=Object.prototype.hasOwnProperty;var l=(a,i)=>{for(var e in i)m(a,e,{get:i[e],enumerable:!0})},u=(a,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of c(i))!r.call(a,s)&&s!==e&&m(a,s,{get:()=>i[s],enumerable:!(t=d(i,s))||t.enumerable});return a};var T=a=>u(m({},"__esModule",{value:!0}),a);var y={};l(y,{default:()=>o});module.exports=T(y);var h=require("obsidian"),n="Don't switch",p={myDarkModeThemeName:n,myLightModeThemeName:n,startupCheck:!1},o=class extends h.Plugin{constructor(){super(...arguments);this.darkModeBefore=document.body.hasClass("theme-dark")}async onload(){await this.loadSettings(),this.addSettingTab(new g(this.app,this)),this.registerEvent(this.app.workspace.on("css-change",()=>{let e=document.body.hasClass("theme-dark");this.darkModeBefore!=e&&(this.darkModeBefore=e,this.setTheme(e?this.settings.myDarkModeThemeName:this.settings.myLightModeThemeName))})),this.app.workspace.onLayoutReady(()=>{if(this.settings.startupCheck){let e=document.body.hasClass("theme-dark");this.setTheme(e?this.settings.myDarkModeThemeName:this.settings.myLightModeThemeName)}})}setTheme(e){e!==n&&this.app.customCss.setTheme(e)}onunload(){}async loadSettings(){this.settings=Object.assign({},p,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},g=class extends h.PluginSettingTab{constructor(e,t){super(e,t);this.DEFAULT_THEME_KEY="";this.DEFAULT_THEME_TEXT="Default";this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new h.Setting(this.containerEl).setName("Theme to use with dark mode").setDesc("Pick from your installed themes").addDropdown(async t=>{t.addOption(n,n);for(let s of Object.values(this.getThemes()))t.addOption(s,this.getThemeNames(s));t.setValue(this.plugin.settings.myDarkModeThemeName),t.onChange(async s=>{this.plugin.settings.myDarkModeThemeName=s,await this.plugin.saveSettings()})}),new h.Setting(this.containerEl).setName("Theme to use with light mode").setDesc("Pick from your installed themes").addDropdown(async t=>{t.addOption(n,n);for(let s of Object.values(this.getThemes()))t.addOption(s,this.getThemeNames(s));t.setValue(this.plugin.settings.myLightModeThemeName),t.onChange(async s=>{this.plugin.settings.myLightModeThemeName=s,await this.plugin.saveSettings()})}),new h.Setting(this.containerEl).setName("Check dark/light mode at startup").setDesc('Useful if "Base color scheme" is set to "Adapt to system"').addToggle(async t=>{t.setValue(this.plugin.settings.startupCheck),t.onChange(async s=>{this.plugin.settings.startupCheck=s,await this.plugin.saveSettings()})})}getThemes(){return[this.DEFAULT_THEME_KEY,...Object.keys(this.app.customCss.themes),...this.app.customCss.oldThemes]}getThemeNames(e){return e===this.DEFAULT_THEME_KEY?this.DEFAULT_THEME_TEXT:e}};

/* nosourcemap */